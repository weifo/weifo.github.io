<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>weifo</title>
  
  <subtitle>选择你所爱的，爱你所选择的</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weifo.github.io/"/>
  <updated>2020-02-16T13:23:34.829Z</updated>
  <id>https://weifo.github.io/</id>
  
  <author>
    <name>weifo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>随笔 - 如何用es6+写出优雅的js代码</title>
    <link href="https://weifo.github.io/2019/12/12/%E9%9A%8F%E7%AC%94-%E5%A6%82%E4%BD%95%E7%94%A8es6+%E5%86%99%E5%87%BA%E4%BC%98%E9%9B%85%E7%9A%84js%E4%BB%A3%E7%A0%81/"/>
    <id>https://weifo.github.io/2019/12/12/随笔-如何用es6+写出优雅的js代码/</id>
    <published>2019-12-12T01:59:21.000Z</published>
    <updated>2020-02-16T13:23:34.829Z</updated>
    
    <content type="html"><![CDATA[<p>兼容 IE ？不存在的好吗。</p><p>其实使用新语法配合 <code>babel</code> 的转码，已经可以解决这一些问题了。既然如此，那就多使用新语法去探索一下怎么更好的去写代码吧。</p><p>下面分享个人开发中常用的 js 写法技巧，希望对各位有所帮助。</p><h2 id="使用-let-const"><a href="#使用-let-const" class="headerlink" title="使用 let / const"></a>使用 let / const</h2><p><code>var</code> 命令会发生”变量提升“现象，即变量可以在声明之前使用，值为 <code>undefined</code>。这种现象多多少少是有些奇怪的。</p><p>个人认为，对声明的变量确定后面不会发生更改时，即使性能上没有太大提升差异在，但使用 <code>const</code>, 代码的可读性也会增强很多。</p><ul><li><code>const</code> 实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。</li><li><code>let</code> 变量指向的内存地址，保存的只是一个指向实际数据的指针</li></ul><p>补充 <code>const</code> 定义的变量不是数据不可变，而是保存的引用地址不能发生改变。例子如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">age</span>: <span class="number">22</span> &#125;</span><br><span class="line">person.age = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.age) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>详情看 <a href="http://es6.ruanyifeng.com/#docs/let" target="_blank" rel="noopener">let 和 const 命令</a></p><a id="more"></a><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p><code>ES6</code> 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（<code>Destructuring</code>）。</p><p>好处就是：解决了访问多层嵌套的对象或数组的命名，减少代码量</p><p>声明多个变量:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [age, name, sex] = [<span class="number">22</span>, <span class="string">'guodada'</span>, <span class="number">1</span>]</span><br><span class="line"><span class="built_in">console</span>.log(age, name, sex) <span class="comment">// 22, guodada, 1</span></span><br></pre></td></tr></table></figure><p>使用在对象中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name: &#123;</span><br><span class="line">    firstName: <span class="string">'guo'</span>,</span><br><span class="line">    lastName: <span class="string">'dada'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果我们多处使用 firstName， 那就不必要每个地方都写 obj.name.firstName, 这样极大提升coding效率</span></span><br><span class="line"><span class="keyword">const</span> &#123; firstName, lastName &#125; = obj.name</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">const</span> firstName = obj.name.firstName</span><br><span class="line"><span class="keyword">const</span> lastName = obj.name.lastName</span><br></pre></td></tr></table></figure><p>使用在函数中:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在参数中结构赋值，获取参数, 当参数多的使用时候十分方便</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Destructuring</span>(<span class="params">&#123; name, age &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; name, age &#125; <span class="comment">// 相当于 &#123; name: name, age: age &#125; , 可以简写</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = &#123; <span class="attr">name</span>: <span class="string">'guodada'</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;</span><br><span class="line">Destructuring(params)</span><br></pre></td></tr></table></figure><p>更多用法见 <a href="http://es6.ruanyifeng.com/#docs/destructuring" target="_blank" rel="noopener">变量的解构赋值</a></p><p>ES6 允许在对象之中，直接写变量。这时，属性名为变量名, 属性值为变量的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; x, y &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">x</span>: x, <span class="attr">y</span>: y &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// Object &#123;x: 1, y: 2&#125;</span></span><br></pre></td></tr></table></figure><h2 id="扩展符的运用"><a href="#扩展符的运用" class="headerlink" title="扩展符的运用"></a>扩展符的运用</h2><p>es6 扩展符有很多用法，他可以使你的代码更加简洁，易懂。这里就举例常用的用法</p><p>在对象中的用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'guodada'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  sex: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制对象。扩展符为浅复制！！！</span></span><br><span class="line"><span class="keyword">const</span> copy = &#123; ...obj &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改对象属性值(生成新对象) 相当于 Object.assgin(&#123;&#125;, obj, &#123; age: 18 &#125;)</span></span><br><span class="line"><span class="keyword">const</span> newObj = &#123; ...obj, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结合结构赋值</span></span><br><span class="line"><span class="keyword">let</span> &#123; sex, ...z &#125; = obj</span><br><span class="line">z <span class="comment">// &#123; name: 'guodada', age: 22 &#125;</span></span><br></pre></td></tr></table></figure><p>在数组中的用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制数组。扩展符为浅复制！！！</span></span><br><span class="line"><span class="keyword">const</span> newArr = [...arr] <span class="comment">// ...[1, 2, 3] =&gt; 相当于展开数组：1, 2, 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并数组</span></span><br><span class="line"><span class="keyword">const</span> conbineArr = [...arr, ...arr2]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结合求最大值函数</span></span><br><span class="line"><span class="built_in">Math</span>.max(...arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结合 Set 实现数组去重。注意：json 等对象数组不可用</span></span><br><span class="line">[...new <span class="built_in">Set</span>(arr2)] <span class="comment">// [4, 5, 6]</span></span><br></pre></td></tr></table></figure><p>扩展符的其他用法请自行查资料。</p><h2 id="数组用法"><a href="#数组用法" class="headerlink" title="数组用法"></a>数组用法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(arr) <span class="comment">// 判断是否为数组</span></span><br><span class="line"></span><br><span class="line">arr.includes(<span class="number">2</span>) <span class="comment">// true 判断数组中是否包含某项</span></span><br><span class="line"></span><br><span class="line">arr.findIndex(<span class="function"><span class="params">d</span> =&gt;</span> d === <span class="number">3</span>) <span class="comment">// 2 找出第一个符合条件的数组成员并返回数组下标, 找不到返回 -1</span></span><br><span class="line"></span><br><span class="line">arr.find(<span class="function"><span class="params">d</span> =&gt;</span> d === <span class="number">3</span>) <span class="comment">// 3 找出第一个符合条件的数组成员并返回, 找不到返回 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// es5 其他还有 filter map forEach 等，这里不做举例。</span></span><br><span class="line">arr.every(<span class="function"><span class="params">d</span> =&gt;</span> d &gt; <span class="number">2</span>) <span class="comment">// false 每一项都满足条件则返回 true</span></span><br><span class="line"></span><br><span class="line">arr.some(<span class="function"><span class="params">d</span> =&gt;</span> d &gt; <span class="number">2</span>) <span class="comment">// true 只要有一项满足条件则返回 true</span></span><br></pre></td></tr></table></figure><p><code>find/findIndex</code> : 找出第一个符合条件的数组成员之后不再匹配，一定程度下优化查找。<br><code>includes</code>: 返回 <code>true/false</code>, 相较于 <code>indexOf</code>, 实用多了</p><ul><li><p><code>flat()</code> : 扁平化数组，常用于将数组转化为一维数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line"></span><br><span class="line">arr.flat() <span class="comment">// [1, 2, 3, 4] 扁平化数组, 默认展开一层。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]]</span><br><span class="line"></span><br><span class="line">arr2.flat() <span class="comment">// [1, 2, 3, 4, [5, 6]]</span></span><br><span class="line">arr2.flat(<span class="number">2</span>) <span class="comment">// [1, 2, 3, 4, 5, 6] flat(3) 也是展开两层...</span></span><br></pre></td></tr></table></figure></li><li><p><code>flatMap()</code>: 在数组执行 <code>map</code> 方法后执行 <code>flat</code>, 用的不多，其实可以写 <code>map</code> 后写 <code>flat</code> 更好懂点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">;[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].flatMap(<span class="function"><span class="params">x</span> =&gt;</span> [x, x * <span class="number">2</span>]) <span class="comment">//  [ 2, 4, 3, 6, 4, 8 ]</span></span><br><span class="line"><span class="comment">// 1. [2, 3, 4].map(d =&gt; [d, d * 2]) =&gt; [[2, 4], [3, 6], [4, 8]]</span></span><br><span class="line"><span class="comment">// 2. [[2, 4], [3, 6], [4, 8]].flat()</span></span><br></pre></td></tr></table></figure></li></ul><p>补充常用的对象转数组的用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">'guodada'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(obj) <span class="comment">// ['name']</span></span><br><span class="line"><span class="built_in">Object</span>.values(obj) <span class="comment">// ['guodada']</span></span><br><span class="line"><span class="built_in">Object</span>.entries(obj) <span class="comment">// [['name', 'guodada']]</span></span><br></pre></td></tr></table></figure><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>用的挺多的，注意不兼容 <code>IE</code> !</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'guodada'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newStr = <span class="string">`welcome <span class="subst">$&#123;name&#125;</span>`</span> <span class="comment">// welcome guodada</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the same as</span></span><br><span class="line"><span class="keyword">const</span> newStr = <span class="string">'welcome '</span> + name</span><br></pre></td></tr></table></figure><h2 id="使用-async-await"><a href="#使用-async-await" class="headerlink" title="使用 async / await"></a>使用 async / await</h2><p><code>async/await</code> 实际上就是 <code>generator</code> 的语法糖, 主要用来解决异步问题，具体网上很多文章都有介绍，这里就不做多的解释吧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> axios.get(<span class="string">'https://randomuser.me/api/'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  axios.get(<span class="string">'https://randomuser.me/api/'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res)) <span class="comment">// axios 也是 promise 对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结合try/catch</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> axios.get(<span class="string">'https://randomuser.me/api/'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps 虽然好用，但是有时候适用场景不好，比如我们在拉取列表和用户信息需要同时进行时，<code>await</code> 后才执行下一条语句，这不是我们希望看到的。解决方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结合 Promise.all</span></span><br><span class="line"><span class="keyword">await</span> <span class="built_in">Promise</span>.all([anAsyncCall(), thisIsAlsoAsync(), oneMore()])</span><br></pre></td></tr></table></figure><p>传送门：<a href="http://es6.ruanyifeng.com/#docs/async" target="_blank" rel="noopener">async 函数</a></p><h2 id="利用-class-封装代码"><a href="#利用-class-封装代码" class="headerlink" title="利用 class 封装代码"></a>利用 class 封装代码</h2><p>主要是抽离代码逻辑，使得代复用性加强。同时，<code>class</code> 的形式会让结构变得更加清晰，譬如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @func defaultLimit - 默认表单输入限制条件, value 为空时返回 true</span></span><br><span class="line"><span class="comment">   * @param &#123;Number&#125; type - 代表表单类型的节点！</span></span><br><span class="line"><span class="comment">   * @param &#123;String&#125; value - 需要被验证的值</span></span><br><span class="line"><span class="comment">   * @return Boolean</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * 根据 type 属性对输出进行验证</span></span><br><span class="line"><span class="comment">   * 1 0≤x≤50 整数</span></span><br><span class="line"><span class="comment">   * 2 -1000≤x≤2000 整数</span></span><br><span class="line"><span class="comment">   * 3 1≤x 整数</span></span><br><span class="line"><span class="comment">   * 4 0≤x≤10</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> defaultLimit(type, value) &#123;</span><br><span class="line">    <span class="keyword">const</span> typeLimitMap = &#123;</span><br><span class="line">      <span class="number">1</span>: <span class="regexp">/^(\d|[1-4]\d|50)$/g</span>,</span><br><span class="line">      <span class="number">2</span>: <span class="regexp">/^-?(\d&#123;1,3&#125;|1000)$|^(-|1\d&#123;3&#125;|2000)$/</span>,</span><br><span class="line">      <span class="number">3</span>: <span class="regexp">/^[1-9]\d*$/</span>,</span><br><span class="line">      <span class="number">4</span>: <span class="function"><span class="params">value</span> =&gt;</span> value &lt;= <span class="number">10</span> &amp;&amp; value &gt;= <span class="number">0</span> <span class="comment">// 0≤ x ≤ 10 可以为小数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!typeLimitMap[type] || !value) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> typeLimitMap[type] === <span class="string">'function'</span>) <span class="keyword">return</span> typeLimitMap[type](value)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> typeLimitMap[type].test(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @func translateLimit - 转换操作符</span></span><br><span class="line"><span class="comment">   * @param &#123;String&#125; operator - 运算符</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; value - 被匹配的值</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; compareValue - 匹配的值</span></span><br><span class="line"><span class="comment">   * @return Boolean</span></span><br><span class="line"><span class="comment">   * 'eq': '='</span></span><br><span class="line"><span class="comment">   * 'ne': '≠'</span></span><br><span class="line"><span class="comment">   * 'gt': '&gt;'</span></span><br><span class="line"><span class="comment">   * 'lt': '&lt;'</span></span><br><span class="line"><span class="comment">   * 'ge': '≥'</span></span><br><span class="line"><span class="comment">   * 'le': '≤'</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> translateLimit(operator, value, compareValue) &#123;</span><br><span class="line">    <span class="keyword">const</span> type = &#123;</span><br><span class="line">      eq: value === compareValue,</span><br><span class="line">      ne: value !== compareValue,</span><br><span class="line">      gt: value &gt; compareValue,</span><br><span class="line">      lt: value &lt; compareValue,</span><br><span class="line">      ge: value &gt;= compareValue,</span><br><span class="line">      le: value &lt;= compareValue</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Object</span>.keys(type).includes(operator) || !value || value === <span class="string">'-'</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> type[operator]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyForm</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MyForm <span class="keyword">from</span> <span class="string">'./MyForm'</span></span><br><span class="line"></span><br><span class="line">MyForm.defaultLimit(<span class="number">1</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><ul><li><code>static</code> ：静态属性，类可以直接调用</li><li><code>constructor</code> : 实例化类的时候调用，即 <code>new MyForm()</code>, 这里没用到</li></ul><p>更多知识请阅 <a href="http://es6.ruanyifeng.com/#docs/class" target="_blank" rel="noopener">Class 的基本语法</a></p><h2 id="优化-if-else-语句"><a href="#优化-if-else-语句" class="headerlink" title="优化 if/else 语句"></a>优化 if/else 语句</h2><blockquote><p>当逻辑或<code>||</code>时，找到为 <code>true</code> 的分项就停止处理，并返回该分项的值，否则执行完，并返回最后分项的值。</p><p>当逻辑与<code>&amp;&amp;</code>时，找到为 <code>false</code> 的分项就停止处理，并返回该分项的值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">0</span> || <span class="literal">null</span> || <span class="number">3</span> || <span class="number">4</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">3</span> &amp;&amp; <span class="number">4</span> &amp;&amp; <span class="literal">null</span> &amp;&amp; <span class="number">0</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// null</span></span><br></pre></td></tr></table></figure><p>减少 <code>if / else</code>地狱般的调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [age, name, sex] = [<span class="number">22</span>, <span class="string">'guodada'</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (age &gt; <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">'guodada'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'all right'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 &amp;&amp;</span></span><br><span class="line"><span class="keyword">if</span> (age &gt; <span class="number">10</span> &amp;&amp; name === <span class="string">'guodada'</span> &amp;&amp; sex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'all right'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者(太长了不推荐)</span></span><br><span class="line">age &gt; <span class="number">10</span> &amp;&amp; name === <span class="string">'guodada'</span> &amp;&amp; sex &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">console</span>.log(<span class="string">'all right'</span>)</span><br></pre></td></tr></table></figure><p>提一下 <code>react</code> 的坑点, 在 <code>render</code> 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">render()&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = []</span><br><span class="line">  <span class="keyword">return</span> arr.length &amp;&amp; <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 渲染出 0 ！</span></span><br><span class="line"><span class="comment">// Boolean / undefind / null / NaN 等才不会渲染。我们可以使用 !! 强制转化为 boolean 解决这个问题</span></span><br><span class="line"><span class="keyword">return</span> !!arr.length &amp;&amp; <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 &amp;&amp; 控制组件的渲染</span></span><br><span class="line"><span class="keyword">this</span>.state.visible &amp;&amp; &lt;Modal /&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>Array.includes</code> 来处理多重条件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ages = [<span class="number">18</span>, <span class="number">20</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (age === <span class="number">18</span> || age === <span class="number">12</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'match'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// better</span></span><br><span class="line"><span class="keyword">if</span> ([<span class="number">18</span>, <span class="number">12</span>].includes(age)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'match'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是较少的判断逻辑则可以使用三元运算符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">22</span></span><br><span class="line"><span class="keyword">const</span> isAdult = age &gt;= <span class="number">18</span> ? <span class="literal">true</span> : <span class="literal">false</span> <span class="comment">// 这里可以简写为 const isAdult = age &gt; 18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> type = age &gt;= <span class="number">18</span> ? <span class="string">'adult'</span> : <span class="string">'child'</span></span><br></pre></td></tr></table></figure><h2 id="优化-switch-case-语句"><a href="#优化-switch-case-语句" class="headerlink" title="优化 switch/case 语句"></a>优化 switch/case 语句</h2><p><code>switch/case</code> 比 <code>if/else</code> 代码结构好点，但也和它一样有时十分冗长。</p><p>这里以自己实际项目中代码举例：<br>有时我们可能需要对不同类型的字段进行不一样的正则验证，防止用户错误地输入。譬如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [type, value] = [<span class="number">1</span>, <span class="string">'20'</span>]</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 type 属性对输出进行验证</span></span><br><span class="line"><span class="comment"> * 1 0≤x≤50 整数</span></span><br><span class="line"><span class="comment"> * 2 -1000≤x≤2000 整数</span></span><br><span class="line"><span class="comment"> * 3 1≤x 整数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params">type, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^(\d|[1-4]\d|50)$/</span>.test(value)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^-?(\d&#123;1,3&#125;|1000)$|^(-|1\d&#123;3&#125;|2000)$/</span>.test(value)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^[1-9]\d*$/</span>.test(value)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func1(type, value)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 switch/case</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params">type, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^(\d|[1-4]\d|50)$/</span>.test(value)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^-?(\d&#123;1,3&#125;|1000)$|^(-|1\d&#123;3&#125;|2000)$/</span>.test(value)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^[1-9]\d*$/</span>.test(value)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func2(type, value)</span><br></pre></td></tr></table></figure><p>我们如何巧妙的解决这个代码冗长的问题呢，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func3</span>(<span class="params">type, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> limitMap = &#123;</span><br><span class="line">    <span class="number">1</span>: <span class="regexp">/^(\d|[1-4]\d|50)$/g</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="regexp">/^-?(\d&#123;1,3&#125;|1000)$|^(-|1\d&#123;3&#125;|2000)$/</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="regexp">/^[1-9]\d*$/</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> limitMap[type].test(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用对象去匹配属性值，可以减少你的代码量，也使你的代码看起来更加简洁。你也可以使用 <code>Map</code> 对象去匹配。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func4</span>(<span class="params">type, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> mapArr = [[<span class="number">1</span>, /^(\d|[<span class="number">1</span><span class="number">-4</span>]\d|<span class="number">50</span>)$/g], [<span class="number">2</span>, /^-?(\d&#123;<span class="number">1</span>,<span class="number">3</span>&#125;|<span class="number">1000</span>)$|^(-|<span class="number">1</span>\d&#123;<span class="number">3</span>&#125;|<span class="number">2000</span>)$/], [<span class="number">3</span>, /^[<span class="number">1</span><span class="number">-9</span>]\d*$/]]</span><br><span class="line">  <span class="keyword">const</span> limitMap = <span class="keyword">new</span> <span class="built_in">Map</span>(mapArr)</span><br><span class="line">  <span class="keyword">return</span> limitMap.get(type).test(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Map</code> 是一种键值对的数据结构对象，它的匹配更加严格。它会区分开你传递的是字符串还是数字，譬如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">limitMap.get(<span class="number">1</span>) <span class="comment">// /^(\d|[1-4]\d|50)$/g</span></span><br><span class="line">limitMap.get(<span class="string">'1'</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>更多详见 <a href="http://es6.ruanyifeng.com/#docs/set-map" target="_blank" rel="noopener">Set 和 Map 数据结构</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><p>函数参数默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">name, age = <span class="number">22</span></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  age = age || <span class="number">22</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>===</code> 代替 <code>==</code>。其实大家都懂这个的。。。</p></li><li>箭头函数，es6 最常用的语法。</li><li>return boolean<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> a === <span class="number">1</span> ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line"><span class="comment">// 多此一举了，其实就等于</span></span><br><span class="line"><span class="keyword">return</span> a === <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><p>敬请各位补充。交流才能进步，相视一笑，嘿嘿。</p><ul><li><a href="https://github.com/gershonv/my-code-store" target="_blank" rel="noopener">github</a> - star 一下人生更美好</li><li><a href="https://gershonv.github.io/categories/" target="_blank" rel="noopener">blog</a> - 欢迎交流</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;兼容 IE ？不存在的好吗。&lt;/p&gt;
&lt;p&gt;其实使用新语法配合 &lt;code&gt;babel&lt;/code&gt; 的转码，已经可以解决这一些问题了。既然如此，那就多使用新语法去探索一下怎么更好的去写代码吧。&lt;/p&gt;
&lt;p&gt;下面分享个人开发中常用的 js 写法技巧，希望对各位有所帮助。&lt;/p&gt;
&lt;h2 id=&quot;使用-let-const&quot;&gt;&lt;a href=&quot;#使用-let-const&quot; class=&quot;headerlink&quot; title=&quot;使用 let / const&quot;&gt;&lt;/a&gt;使用 let / const&lt;/h2&gt;&lt;p&gt;&lt;code&gt;var&lt;/code&gt; 命令会发生”变量提升“现象，即变量可以在声明之前使用，值为 &lt;code&gt;undefined&lt;/code&gt;。这种现象多多少少是有些奇怪的。&lt;/p&gt;
&lt;p&gt;个人认为，对声明的变量确定后面不会发生更改时，即使性能上没有太大提升差异在，但使用 &lt;code&gt;const&lt;/code&gt;, 代码的可读性也会增强很多。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt; 实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt; 变量指向的内存地址，保存的只是一个指向实际数据的指针&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;补充 &lt;code&gt;const&lt;/code&gt; 定义的变量不是数据不可变，而是保存的引用地址不能发生改变。例子如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; person = &amp;#123; &lt;span class=&quot;attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;person.age = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person.age) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;详情看 &lt;a href=&quot;http://es6.ruanyifeng.com/#docs/let&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;let 和 const 命令&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开发随笔" scheme="https://weifo.github.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>五分钟了解(安装)typescript</title>
    <link href="https://weifo.github.io/2019/11/14/ts_basic/"/>
    <id>https://weifo.github.io/2019/11/14/ts_basic/</id>
    <published>2019-11-14T15:05:08.000Z</published>
    <updated>2019-11-18T08:04:06.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="typescript的由来"><a href="#typescript的由来" class="headerlink" title="typescript的由来"></a>typescript的由来</h2><p>typescript是由微软的一个技术团队开发和维护的一个开源项目，之所以会推出这个项目是为了解决js的一个缺陷吧！由于Javascript是一种<em>动态弱类型</em>的语言，在测试和debug阶段会非常的痛苦，也是为了解决这一“痛点”，微软的VS code团队推出了<strong>typescript</strong><br>&ensp; (强弱/动态静态具体解释，<a href="https://github.com/muwenzi/Program-Blog/issues/34" target="_blank" rel="noopener">click here!</a>)</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><p>安装后即可通过 <strong>tsc -v</strong> 命令行来查看安装版本，如果提示tsc不是内部或外部命令的话，说明系统的环境变量没有配置，csdn上有相关的解决办法。</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc xxx.ts</span><br></pre></td></tr></table></figure><p>编译后会在相同文件夹下生成同名的js文件，关于更加工程化地使用typescript可以参考<a href="https://www.tslang.cn/samples/index.html" target="_blank" rel="noopener">官方文档</a></p><h3 id="变量和函数声明"><a href="#变量和函数声明" class="headerlink" title="变量和函数声明"></a>变量和函数声明</h3><p>与js语法相比，在所有的变量加上类型<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> taylor:<span class="built_in">string</span>=<span class="string">'Taylor'</span>;</span><br><span class="line"><span class="keyword">let</span> age:<span class="built_in">number</span>=<span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组有两种定义方式</span></span><br><span class="line"><span class="keyword">let</span> skills:<span class="built_in">string</span>[]=[<span class="string">'sing'</span>,<span class="string">'gituar'</span>,<span class="string">'writing'</span>];</span><br><span class="line"><span class="keyword">let</span> cats:<span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;=[<span class="string">'white'</span>,<span class="string">'dog'</span>,<span class="string">'miao'</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">info</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>):<span class="title">string</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> s:<span class="built_in">string</span>=<span class="string">''</span>;</span><br><span class="line">    s=<span class="string">`He is <span class="subst">$&#123;name&#125;</span>,and he's <span class="subst">$&#123;age&#125;</span> years old`</span>;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">info(<span class="string">'calvin harris'</span>,<span class="number">28</span>)</span><br></pre></td></tr></table></figure></p><h3 id="接口和类"><a href="#接口和类" class="headerlink" title="接口和类"></a>接口和类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可选属性</span></span><br><span class="line"><span class="keyword">interface</span> employee&#123;</span><br><span class="line">    degree?:<span class="built_in">string</span>,</span><br><span class="line">    skilled?:<span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">config:employee</span>):<span class="title">boolean</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(config.skilled)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(config.degree===<span class="string">'master'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> t1=test(&#123;degree:<span class="string">'master'</span>&#125;)</span><br><span class="line"><span class="keyword">let</span> t2=test(&#123;degree:<span class="string">'bachelor'</span>,skilled:<span class="string">'false'</span>&#125;)</span><br><span class="line"><span class="keyword">let</span> t3=test(&#123;skilled:<span class="string">'true'</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(t1,t2,t3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只读属性</span></span><br><span class="line"><span class="keyword">interface</span> Point&#123;</span><br><span class="line">    readonly x:<span class="built_in">number</span>,</span><br><span class="line">    readonly y:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1:Point=&#123;x:<span class="number">10</span>,y:<span class="number">5</span>&#125;</span><br><span class="line">p1.y=<span class="number">12</span></span><br><span class="line"><span class="comment">// error</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;typescript的由来&quot;&gt;&lt;a href=&quot;#typescript的由来&quot; class=&quot;headerlink&quot; title=&quot;typescript的由来&quot;&gt;&lt;/a&gt;typescript的由来&lt;/h2&gt;&lt;p&gt;typescript是由微软的一个技术团队开发和维护
      
    
    </summary>
    
      <category term="技术" scheme="https://weifo.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://weifo.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>包学不会的深拷贝与浅拷贝</title>
    <link href="https://weifo.github.io/2019/11/14/deepclone/"/>
    <id>https://weifo.github.io/2019/11/14/deepclone/</id>
    <published>2019-11-14T14:13:05.000Z</published>
    <updated>2019-11-30T05:40:26.649Z</updated>
    
    <content type="html"><![CDATA[<h2 id="深拷贝与浅拷贝的含义"><a href="#深拷贝与浅拷贝的含义" class="headerlink" title="深拷贝与浅拷贝的含义"></a>深拷贝与浅拷贝的含义</h2><p>首先要知道在js的世界中，有两种类型的值，分别是基础类型和引用类型。基础类型包括<strong>string,number,boolean,Symbol,undefined,null</strong>,引用类型包括<strong>array,object</strong>等。</p><ul><li>基本数据类型：直接存储在栈（stack）中的数据</li><li>引用数据类型：在栈中存放的是指针，真实的数据存放在堆中。</li></ul><p><strong>首先要分清拷贝和赋值的区别</strong><br>引用类型的赋值是直接赋值了一个指针，二者指向相同的数据内存。而拷贝是要创建一个新的对象/数组，如果只拷贝一层数据的话叫浅拷贝，如果拷贝多层数据叫深拷贝。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">    name:<span class="string">'Mike'</span>,</span><br><span class="line">    age:<span class="number">36</span>,</span><br><span class="line">    hobby:[<span class="string">'movies'</span>,<span class="string">'music'</span>,<span class="string">'running'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这是赋值,任何一个都能操作共有的内存数据</span></span><br><span class="line"><span class="keyword">let</span> obj1=obj;</span><br><span class="line">obj1.name=<span class="string">'fred'</span>;</span><br><span class="line">obj1.hobby[<span class="number">1</span>]=<span class="string">'eat'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj,obj1)；</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是浅拷贝,只能拷贝一层数据，当对象中有引用类型的value时，只会拷贝这个引用的指针</span></span><br><span class="line"><span class="keyword">let</span> obj2=&#123;...obj&#125;;</span><br><span class="line">obj2.name=<span class="string">'max'</span>;<span class="comment">//不会改变源对象</span></span><br><span class="line">obj2.hobby[<span class="number">1</span>]=<span class="string">'sleep'</span>; <span class="comment">//会改变源对象</span></span><br><span class="line"><span class="built_in">console</span>.log(obj,obj2)</span><br></pre></td></tr></table></figure><h2 id="如何实现浅拷贝"><a href="#如何实现浅拷贝" class="headerlink" title="如何实现浅拷贝"></a>如何实现浅拷贝</h2><h4 id="数组的浅拷贝"><a href="#数组的浅拷贝" class="headerlink" title="数组的浅拷贝"></a>数组的浅拷贝</h4><ul><li><p>slice方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>],</span><br><span class="line">    arr1=arr.slice();</span><br><span class="line">arr1.push(<span class="number">11</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr,arr1)</span><br></pre></td></tr></table></figure></li><li><p>concat方法,当不给concat传参时，该方法和slice()作用相同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1=arr.concat();</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>spread操作符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,[<span class="number">8</span>,<span class="number">9</span>]];</span><br><span class="line"><span class="keyword">let</span> arr1=[...arr];</span><br><span class="line">arr.push(<span class="number">15</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr,arr1);</span><br><span class="line">arr1[<span class="number">3</span>].push(<span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr,arr1);</span><br></pre></td></tr></table></figure></li></ul><h4 id="对象的浅拷贝"><a href="#对象的浅拷贝" class="headerlink" title="对象的浅拷贝"></a>对象的浅拷贝</h4><ul><li><p>手动实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowCopy</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target=&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> src)&#123;</span><br><span class="line">        <span class="keyword">if</span>(src.hasOwnProperty(key))&#123;</span><br><span class="line">            target[key]=src[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// hasOwnProperty方法可以排除来自原型链上的属性</span></span><br></pre></td></tr></table></figure></li><li><p>Object.assign()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;<span class="attr">a</span>:&#123;<span class="attr">name</span>:<span class="string">'weifo'</span>,<span class="attr">age</span>:<span class="number">33</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">let</span> copyobj=<span class="built_in">Object</span>.assign(&#123;&#125;,obj);</span><br><span class="line">copyobj.a.name=<span class="string">'curt'</span>;</span><br><span class="line">concole.log(obj.a.name);<span class="comment">//curt</span></span><br></pre></td></tr></table></figure></li><li><p>spread</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;<span class="attr">name</span>:<span class="string">'weifo'</span>,<span class="attr">skill</span>:[<span class="string">'english'</span>,<span class="string">'code'</span>]&#125;;</span><br><span class="line"><span class="keyword">let</span> copyobj=&#123;...obj,<span class="attr">name</span>:<span class="string">'fred'</span>&#125;;<span class="comment">//&#123;name:'fred',skill:[...]&#125;</span></span><br><span class="line"><span class="comment">//es6语法</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="深拷贝的实现"><a href="#深拷贝的实现" class="headerlink" title="深拷贝的实现"></a>深拷贝的实现</h2><ul><li><p>trick版</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line"><span class="comment">// 该方法的局限性：symbol，undefined，函数的属性值会被忽略，例子如下</span></span><br><span class="line"><span class="keyword">let</span> syb=<span class="built_in">Symbol</span>(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">    name:<span class="string">'fred'</span>,</span><br><span class="line">    say:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'It wont alert'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    syb:syb，</span><br><span class="line">    age:<span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> copy=<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line"><span class="built_in">console</span>.log(copy);<span class="comment">//&#123;name:'fred'&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>手动实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepclone</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> src===<span class="string">'object'</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> clone=<span class="built_in">Array</span>.isArray(src)?[]:&#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> src)&#123;</span><br><span class="line">            clone[key]=deepclone(src[key]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clone</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> src;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> test=&#123;</span><br><span class="line">    name:<span class="string">'fred'</span>,</span><br><span class="line">    cities:[<span class="string">'tokyo'</span>,<span class="string">'paris'</span>,<span class="string">'london'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> clone=deepclone(test);</span><br><span class="line">clone.cities.push(<span class="string">'rome'</span>);</span><br><span class="line">clone.name=<span class="string">'weifo'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(test,clone)</span><br></pre></td></tr></table></figure></li><li><p>解决循环引用<br>上面的方法可以满足大部分的应用场景了，除了遇到对象引用自身的情况，如果采用上面的方法，会有爆栈的错误提示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test=&#123;</span><br><span class="line">    name:<span class="string">'weifo'</span>,</span><br><span class="line">    field:[<span class="number">3</span>,<span class="number">5</span>,<span class="number">11</span>],</span><br><span class="line">    field1:&#123;</span><br><span class="line">        child:<span class="string">'name'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">test.test=test;<span class="comment">//循环引用</span></span><br><span class="line">deepclone(test)<span class="comment">//RangeError</span></span><br></pre></td></tr></table></figure></li></ul><p>为了解决循环引用的问题，我们可以额外开辟一个存储空间，来存储当前对象和拷贝对象的对应关系，当需要拷贝对象时，先去存储对象中找，找到的话直接返回，没有则继续拷贝。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepclone</span>(<span class="params">target,map=new Map(</span>))</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> target===<span class="string">'object'</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> clone=<span class="built_in">Array</span>.isArray(src)?[]:&#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span>(map.get(target))&#123;</span><br><span class="line">            <span class="keyword">return</span> target</span><br><span class="line">        &#125;</span><br><span class="line">        map.set(target,clone);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> target)&#123;</span><br><span class="line">            clone[key]=clone(target[key],map);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clone</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> target</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>使用lodash<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _=<span class="built_in">require</span>(<span class="string">'lodash'</span>);</span><br><span class="line"><span class="keyword">var</span> objects = [&#123; <span class="string">'a'</span>: <span class="number">1</span> &#125;, &#123; <span class="string">'b'</span>: <span class="number">2</span> &#125;];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> deep = _.cloneDeep(objects);</span><br><span class="line"><span class="built_in">console</span>.log(deep[<span class="number">0</span>] === objects[<span class="number">0</span>]);<span class="comment">//false</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;深拷贝与浅拷贝的含义&quot;&gt;&lt;a href=&quot;#深拷贝与浅拷贝的含义&quot; class=&quot;headerlink&quot; title=&quot;深拷贝与浅拷贝的含义&quot;&gt;&lt;/a&gt;深拷贝与浅拷贝的含义&lt;/h2&gt;&lt;p&gt;首先要知道在js的世界中，有两种类型的值，分别是基础类型和引用类型。基础类型
      
    
    </summary>
    
      <category term="前端开发" scheme="https://weifo.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="javascript" scheme="https://weifo.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>webpack-plugins</title>
    <link href="https://weifo.github.io/2019/10/12/webpack-plugins/"/>
    <id>https://weifo.github.io/2019/10/12/webpack-plugins/</id>
    <published>2019-10-12T13:43:08.000Z</published>
    <updated>2020-02-16T13:25:04.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="功能类"><a href="#功能类" class="headerlink" title="功能类"></a>功能类</h2><h3 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h3><ul><li>把编译后的文件（css/js）插入到入口文件中，可以只指定某些文件插入，可以对 html 进行压缩等</li><li><code>filename</code>：输出文件名；</li><li><code>template</code>：模板文件，不局限于 html 后缀哦；</li><li><code>removeComments</code>：移除 HTML 中的注释；</li><li><code>collapseWhitespace</code>：删除空白符与换行符，整个文件会压成一行；</li><li><code>inlineSource</code>：插入到 html 的 css、js 文件都要内联，即不是以 link、script 的形式引入；</li><li><code>inject</code>：是否能注入内容到 输出 的页面去；</li><li><code>chunks</code>：指定插入某些模块；</li><li><code>hash</code>：每次会在插入的文件后面加上 hash ，用于处理缓存，如：；<br>其他：favicon、meta、title ……；</li></ul><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>), <span class="comment">// 输出文件的目录</span></span><br><span class="line">    filename: <span class="string">'js/[name].[hash:8].js'</span> <span class="comment">// 打包路径及名称</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'index.html'</span>, <span class="comment">// 生成文件名</span></span><br><span class="line">      template: <span class="string">'./public/index.html'</span>, <span class="comment">// 配置要被编译的html文件</span></span><br><span class="line">      hash: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 压缩HTML文件</span></span><br><span class="line">      minify: &#123;</span><br><span class="line">        removeAttributeQuotes: <span class="literal">true</span>, <span class="comment">//删除双引号</span></span><br><span class="line">        collapseWhitespace: <span class="literal">true</span> <span class="comment">//折叠 html 为一行</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传送门 ==&gt; <a href="https://www.npmjs.com/package/html-webpack-plugin" target="_blank" rel="noopener">html-webpack-plugin</a></p><h3 id="clean-webpack-plugin"><a href="#clean-webpack-plugin" class="headerlink" title="clean-webpack-plugin"></a>clean-webpack-plugin</h3><blockquote><p>在编译之前清理指定目录指定内容。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [<span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>])]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定清除哪些文件 new CleanWebpackPlugin(pathsToClean [, &#123;pathsToClean &#125;]) 详情请看 npm</span></span><br></pre></td></tr></table></figure><p>传送门 ==&gt; <a href="https://www.npmjs.com/package/clean-webpack-plugin" target="_blank" rel="noopener">clean-webpack-plugin</a></p><h3 id="copy-webpack-plugin"><a href="#copy-webpack-plugin" class="headerlink" title="copy-webpack-plugin"></a>copy-webpack-plugin</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [<span class="keyword">new</span> CopyWebpackPlugin([...patterns], options)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传送门 ==&gt; <a href="https://www.npmjs.com/package/copy-webpack-plugin" target="_blank" rel="noopener">copy-webpack-plugin</a></p><h3 id="compression-webpack-plugin"><a href="#compression-webpack-plugin" class="headerlink" title="compression-webpack-plugin"></a>compression-webpack-plugin</h3><blockquote><p>使用 compression-webpack-plugin 插件进行压缩，提供带 <code>Content-Encoding</code> 编码的压缩版的资源。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CompressionPlugin = <span class="built_in">require</span>(<span class="string">'compression-webpack-plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CompressionPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'[path].gz[query]'</span>, <span class="comment">//目标资源名称。[file] 会被替换成原资源。[path] 会被替换成原资源路径，[query] 替换成原查询字符串</span></span><br><span class="line">      algorithm: <span class="string">'gzip'</span>, <span class="comment">//算法</span></span><br><span class="line">      test: <span class="regexp">/\.js(\?.*)?$/i</span>, <span class="comment">//压缩 js</span></span><br><span class="line">      deleteOriginalAssets: <span class="literal">true</span>, <span class="comment">// 删除源文件</span></span><br><span class="line">      threshold: <span class="number">10240</span>, <span class="comment">//只处理比这个值大的资源。按字节计算</span></span><br><span class="line">      minRatio: <span class="number">0.8</span> <span class="comment">//只有压缩率比这个值小的资源才会被处理</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传送门 ==&gt; <a href="https://www.npmjs.com/package/compression-webpack-plugin" target="_blank" rel="noopener">compression-webpack-plugin</a></p><h3 id="webpack-manifest-plugin"><a href="#webpack-manifest-plugin" class="headerlink" title="webpack-manifest-plugin"></a>webpack-manifest-plugin</h3><blockquote><p>该插件可以显示出编译之前的文件和编译之后的文件的映射</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ManifestPlugin = <span class="built_in">require</span>(<span class="string">'webpack-manifest-plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [<span class="keyword">new</span> ManifestPlugin()]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传送门 ==&gt; <a href="https://www.npmjs.com/package/webpack-manifest-plugin" target="_blank" rel="noopener">webpack-manifest-plugin</a></p><h3 id="progress-bar-webpack-plugin"><a href="#progress-bar-webpack-plugin" class="headerlink" title="progress-bar-webpack-plugin"></a>progress-bar-webpack-plugin</h3><blockquote><p>编译进度条插件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ProgressBarPlugin = <span class="built_in">require</span>(<span class="string">'progress-bar-webpack-plugin'</span>) <span class="comment">// 编译进度条插件</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [<span class="keyword">new</span> ProgressBarPlugin()]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传送门 ==&gt; <a href="https://www.npmjs.com/package/progress-bar-webpack-plugin" target="_blank" rel="noopener">progress-bar-webpack-plugin</a></p><h2 id="代码相关"><a href="#代码相关" class="headerlink" title="代码相关"></a>代码相关</h2><h3 id="webpack-ProvidePlugin"><a href="#webpack-ProvidePlugin" class="headerlink" title="webpack.ProvidePlugin"></a>webpack.ProvidePlugin</h3><blockquote><p>自动加载模块，而不必到处 import 或 require 。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [<span class="keyword">new</span> webpack.ProvidePlugin(&#123; <span class="attr">$</span>: <span class="string">'jquery'</span> &#125;)]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="built_in">console</span>.log($)</span><br></pre></td></tr></table></figure><p>传送门 ==&gt; <a href="https://www.webpackjs.com/plugins/provide-plugin/" target="_blank" rel="noopener">webpack.ProvidePlugin</a></p><h3 id="webpack-DefinePlugin"><a href="#webpack-DefinePlugin" class="headerlink" title="webpack.DefinePlugin"></a>webpack.DefinePlugin</h3><blockquote><p><code>DefinePlugin</code> 允许创建一个在编译时可以配置的全局常量。这可能会对开发模式和发布模式的构建允许不同的行为非常有用。如果在开发构建中，而不在发布构建中执行日志记录，则可以使用全局常量来决定是否记录日志。这就是 <code>DefinePlugin</code> 的用处，设置它，就可以忘记开发和发布构建的规则。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      PRODUCTION: <span class="built_in">JSON</span>.stringify(<span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="built_in">console</span>.log(PRODUCTION) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>传送门 ==&gt; <a href="https://www.webpackjs.com/plugins/define-plugin/" target="_blank" rel="noopener">webpack.DefinePlugin</a></p><h3 id="mini-css-extract-plugin"><a href="#mini-css-extract-plugin" class="headerlink" title="mini-css-extract-plugin"></a>mini-css-extract-plugin</h3><p><code>mini-css-extract-plugin</code>，它默认就会对你的样式进行模块化拆分。相对 <code>extract-text-webpack-plugin</code>。 即 css 异步按需加载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>) <span class="comment">// 抽取 css 到独立文件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        include: [path.resolve(__dirname, <span class="string">'src'</span>)],</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: MiniCssExtractPlugin.loader,</span><br><span class="line">            options: &#123;</span><br><span class="line">              publicPath: <span class="string">'../'</span> <span class="comment">// chunk publicPath</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">'css-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'css/[name].[hash:8].css'</span>, <span class="comment">//这里配置跟output写法一致</span></span><br><span class="line">      chunkFilename: <span class="string">'css/[id][chunkhash:8].css'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传送门 ==&gt; <a href="https://www.npmjs.com/package/mini-css-extract-plugin" target="_blank" rel="noopener">mini-css-extract-plugin</a></p><h2 id="编译结果优化类"><a href="#编译结果优化类" class="headerlink" title="编译结果优化类"></a>编译结果优化类</h2><h3 id="wbepack-IgnorePlugin"><a href="#wbepack-IgnorePlugin" class="headerlink" title="wbepack.IgnorePlugin"></a>wbepack.IgnorePlugin</h3><p>防止在 import 或 require 调用时，生成以下正则表达式匹配的模块：</p><ul><li><code>requestRegExp</code> 匹配(test)资源请求路径的正则表达式。</li><li><code>contextRegExp</code> （可选）匹配(test)资源上下文（目录）的正则表达式。</li></ul><p>moment 2.18 会将所有本地化内容和核心功能一起打包（见该 <a href="https://github.com/moment/moment/issues/2373" target="_blank" rel="noopener">GitHub issue</a>）。你可使用 IgnorePlugin 在打包时忽略本地化内容:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.IgnorePlugin(<span class="regexp">/^\.\/locale$/</span>, /moment$/)</span><br></pre></td></tr></table></figure><p>传送门 ==&gt; <a href="https://www.webpackjs.com/plugins/ignore-plugin/" target="_blank" rel="noopener">wbepack.IgnorePlugin</a></p><h3 id="uglifyjs-webpack-plugin"><a href="#uglifyjs-webpack-plugin" class="headerlink" title="uglifyjs-webpack-plugin"></a>uglifyjs-webpack-plugin</h3><ul><li>js 代码压缩,默认会使用 <code>optimization.minimizer</code>，</li><li><code>cache</code>: Boolean/String ,字符串即是缓存文件存放的路径；</li><li><code>test</code>：正则表达式、字符串、数组都可以，用于只匹配某些文件，如：/.js(?.*)?\$/i;</li><li><code>parallel</code> : 启用多线程并行运行来提高编译速度，经常编译的时候听到电脑跑的呼呼响，可能就是它干的，哈哈～；</li><li><code>output.comments</code> ： 删除所有注释，</li><li><code>compress.warnings</code> ：插件在进行删除一些无用代码的时候，不提示警告，</li><li><code>compress.drop_console</code>：喜欢打 console 的同学，它能自动帮你过滤掉，再也不用担心线上还打印日志了；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimizer: [</span><br><span class="line">      <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">        cache: <span class="literal">true</span>, <span class="comment">// 开启缓存</span></span><br><span class="line">        parallel: <span class="literal">true</span>, <span class="comment">// 开启多线程编译</span></span><br><span class="line">        sourceMap: <span class="literal">true</span>, <span class="comment">// 是否sourceMap</span></span><br><span class="line">        <span class="comment">// 丑化参数</span></span><br><span class="line">        uglifyOptions: &#123;</span><br><span class="line">          comments: <span class="literal">false</span>,</span><br><span class="line">          warnings: <span class="literal">false</span>,</span><br><span class="line">          compress: &#123;</span><br><span class="line">            unused: <span class="literal">true</span>,</span><br><span class="line">            dead_code: <span class="literal">true</span>,</span><br><span class="line">            collapse_vars: <span class="literal">true</span>,</span><br><span class="line">            reduce_vars: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          output: &#123;</span><br><span class="line">            comments: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传送门 ==&gt; <a href="https://www.npmjs.com/package/uglifyjs-webpack-plugin" target="_blank" rel="noopener">uglifyjs-webpack-plugin</a></p><h3 id="optimize-css-assets-webpack-plugin"><a href="#optimize-css-assets-webpack-plugin" class="headerlink" title="optimize-css-assets-webpack-plugin"></a>optimize-css-assets-webpack-plugin</h3><p>它的作用在于压缩 css 文件</p><ul><li><code>assetNameRegExp</code>：默认是全部的 css 都会压缩，该字段可以进行指定某些要处理的文件，</li><li><code>cssProcessor</code>：指定一个优化 css 的处理器，默认 cssnano，</li><li><code>cssProcessorPluginOptions</code>：cssProcessor 后面可以跟一个 process 方法，会返回一个 promise 对象，而 cssProcessorPluginOptions 就是一个 options 参数选项！</li><li><code>canPrint</code>：布尔，是否要将编译的消息显示在控制台，没发现有什么用！</li><li>坑点 ：建议使用高版本的包，之前低版本有遇到样式丢失把各浏览器前缀干掉的问题，</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> OptimizeCssAssetsPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>) <span class="comment">// 丑化 css</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimizer: [</span><br><span class="line">      <span class="keyword">new</span> OptimizeCssAssetsPlugin(&#123;</span><br><span class="line">        cssProcessor: <span class="built_in">require</span>(<span class="string">'cssnano'</span>), <span class="comment">// css 压缩优化器</span></span><br><span class="line">        cssProcessorOptions: &#123; <span class="attr">discardComments</span>: &#123; <span class="attr">removeAll</span>: <span class="literal">true</span> &#125; &#125; <span class="comment">// 去除所有注释</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传送门 ==&gt; <a href="https://www.npmjs.com/package/optimize-css-assets-webpack-plugin" target="_blank" rel="noopener">optimize-css-assets-webpack-plugin</a></p><h3 id="SplitChunksPlugin"><a href="#SplitChunksPlugin" class="headerlink" title="SplitChunksPlugin"></a>SplitChunksPlugin</h3><p><code>webpack</code> 把 <code>chunk</code> 分为两种类型，一种是初始加载 <code>initial chunk</code>，另外一种是异步加载 <code>async chunk</code>，如果不配置 <code>SplitChunksPlugin，`</code>webpack <code>会在 production 的模式下自动开启，默认情况下，</code>webpack<code>会将</code>node_modules<code>下的所有模块定义为异步加载模块，并分析你的</code>entry<code>、动态加载（</code>import()<code>、require.ensure）模块，找出这些模块之间共用的</code>node_modules<code>下的模块，并将这些模块提取到单独的</code>chunk` 中，在需要的时候异步加载到页面当中，其中默认配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">'async'</span>, <span class="comment">// 异步加载chunk</span></span><br><span class="line">      minSize: <span class="number">30000</span>,</span><br><span class="line">      maxSize: <span class="number">0</span>,</span><br><span class="line">      minChunks: <span class="number">1</span>,</span><br><span class="line">      maxAsyncRequests: <span class="number">5</span>,</span><br><span class="line">      maxInitialRequests: <span class="number">3</span>,</span><br><span class="line">      automaticNameDelimiter: <span class="string">'~'</span>, <span class="comment">// 文件名中chunk分隔符</span></span><br><span class="line">      name: <span class="literal">true</span>,</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        vendors: &#123;</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/]/</span>, <span class="comment">//</span></span><br><span class="line">          priority: <span class="number">-10</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">default</span>: &#123;</span><br><span class="line">          minChunks: <span class="number">2</span>, <span class="comment">// 最小的共享chunk数</span></span><br><span class="line">          priority: <span class="number">-20</span>,</span><br><span class="line">          reuseExistingChunk: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传送门 ==&gt; <a href="https://www.webpackjs.com/plugins/split-chunks-plugin/" target="_blank" rel="noopener">SplitChunksPlugin</a></p><h3 id="webpack-HotModuleReplacementPlugin"><a href="#webpack-HotModuleReplacementPlugin" class="headerlink" title="webpack.HotModuleReplacementPlugin"></a>webpack.HotModuleReplacementPlugin</h3><p>热更新, 配合 <code>webpack-dev-server</code> 使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack-dev-server -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: <span class="number">1234</span>,</span><br><span class="line">    open: <span class="literal">true</span>, <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    compress: <span class="literal">true</span>, <span class="comment">// 服务器压缩</span></span><br><span class="line">    hot: <span class="literal">true</span> <span class="comment">// 开启热加载</span></span><br><span class="line">    <span class="comment">//... proxy、hot</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [<span class="keyword">new</span> webpack.HotModuleReplacementPlugin()]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">  <span class="built_in">module</span>.hot.accept()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>传送门 ==&gt; <a href="https://www.webpackjs.com/configuration/dev-server/" target="_blank" rel="noopener">devServer</a></li><li>传送门 ==&gt; <a href="https://www.npmjs.com/package/webpack-dev-server" target="_blank" rel="noopener">webpack-dev-server</a></li></ul><h2 id="加快编译速度"><a href="#加快编译速度" class="headerlink" title="加快编译速度"></a>加快编译速度</h2><h3 id="DllPlugin-amp-amp-DllReferencePlugin-amp-amp-autodll-webpack-plugin"><a href="#DllPlugin-amp-amp-DllReferencePlugin-amp-amp-autodll-webpack-plugin" class="headerlink" title="DllPlugin &amp;&amp; DllReferencePlugin &amp;&amp; autodll-webpack-plugin"></a>DllPlugin &amp;&amp; DllReferencePlugin &amp;&amp; autodll-webpack-plugin</h3><p><code>DllPlugin</code> 和 <code>DllReferencePlugin</code> 提供分离包的方式可以大大提高构建时间性能。主要思想在于，将一些不做修改的依赖文件，提前打包，这样我们开发代码发布的时候就不需要再对这部分代码进行打包。从而节省了打包时间。</p><p>DllPlugin 插件：用于打包出一个个单独的动态链接库文件。<br>DllReferencePlugin 插件：用于在主要配置文件中去引入 DllPlugin 插件打包好的动态链接库文件。</p><ul><li><code>DllPlugin</code><ul><li><code>context (optional)</code>: manifest 文件中请求的上下文(context)(默认值为 webpack 的上下文(context))</li><li><code>name</code>: 暴露出的 DLL 的函数名 (TemplatePaths: [hash] &amp; [name] )</li><li><code>path</code>: manifest json 文件的绝对路径 (输出文件)</li></ul></li></ul><p><code>DllReferencePlugin</code>: 这个插件把只有 dll 的 bundle(们)(dll-only-bundle(s)) 引用到需要的预编译的依赖。</p><ul><li><code>DllReferencePlugin</code><ul><li><code>context</code>: (绝对路径) manifest (或者是内容属性)中请求的上下文</li><li><code>manifest</code>: 包含 content 和 name 的对象，或者在编译时(compilation)的一个用于加载的 JSON manifest 绝对路径</li><li><code>content (optional)</code>: 请求到模块 id 的映射 (默认值为 manifest.content)</li><li><code>name (optional)</code>: dll 暴露的地方的名称 (默认值为 manifest.name) (可参考 externals)</li><li><code>scope (optional)</code>: dll 中内容的前缀</li><li><code>sourceType (optional)</code>: dll 是如何暴露的 (libraryTarget)</li></ul></li></ul><pre><code class="js"></code></pre><p>传送门 ==&gt; <a href="https://www.webpackjs.com/plugins/dll-plugin/" target="_blank" rel="noopener">DllPlugin</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;功能类&quot;&gt;&lt;a href=&quot;#功能类&quot; class=&quot;headerlink&quot; title=&quot;功能类&quot;&gt;&lt;/a&gt;功能类&lt;/h2&gt;&lt;h3 id=&quot;html-webpack-plugin&quot;&gt;&lt;a href=&quot;#html-webpack-plugin&quot; class=&quot;headerlink&quot; title=&quot;html-webpack-plugin&quot;&gt;&lt;/a&gt;html-webpack-plugin&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;把编译后的文件（css/js）插入到入口文件中，可以只指定某些文件插入，可以对 html 进行压缩等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filename&lt;/code&gt;：输出文件名；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template&lt;/code&gt;：模板文件，不局限于 html 后缀哦；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;removeComments&lt;/code&gt;：移除 HTML 中的注释；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;collapseWhitespace&lt;/code&gt;：删除空白符与换行符，整个文件会压成一行；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inlineSource&lt;/code&gt;：插入到 html 的 css、js 文件都要内联，即不是以 link、script 的形式引入；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inject&lt;/code&gt;：是否能注入内容到 输出 的页面去；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chunks&lt;/code&gt;：指定插入某些模块；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hash&lt;/code&gt;：每次会在插入的文件后面加上 hash ，用于处理缓存，如：；&lt;br&gt;其他：favicon、meta、title ……；&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="webpack" scheme="https://weifo.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://weifo.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack - 理论篇</title>
    <link href="https://weifo.github.io/2019/10/11/webpack-theory/"/>
    <id>https://weifo.github.io/2019/10/11/webpack-theory/</id>
    <published>2019-10-11T03:15:56.000Z</published>
    <updated>2020-02-16T13:24:45.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; - String 时 打包为一个文件，默认包名 main.js</span></span><br><span class="line"><span class="comment"> * @param &#123;Array&#125; - Array 时 webpack会把数组里所有文件打包成一个js文件</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; - Object 时 webpack会把对象里的文件分别打包成多个文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./index.js'</span>,</span><br><span class="line"></span><br><span class="line">  entry: [<span class="string">'./index.js'</span>, <span class="string">'./about.js'</span>],</span><br><span class="line"></span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./index.js'</span>,</span><br><span class="line">    about: <span class="string">'./about.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./index.js'</span>,</span><br><span class="line">    vendors: [<span class="string">'jquery'</span>] <span class="comment">// 分离第三方库</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="vendors-第三方库"><a href="#vendors-第三方库" class="headerlink" title="vendors 第三方库"></a>vendors 第三方库</h3><p>// 待补充</p><h2 id="output"><a href="#output" class="headerlink" title="output"></a>output</h2><blockquote><p>指示 webpack 如何去输出、以及在哪里输出、输出的格式等</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>), <span class="comment">// 输出文件的目录</span></span><br><span class="line">    filename: <span class="string">'js/[name].[chunkhash:8].js'</span>, <span class="comment">// 打包路径及名称</span></span><br><span class="line">    chunkFilename: <span class="string">'js/[name].[chunkhash:8].js'</span> <span class="comment">// 按需加载</span></span><br><span class="line">    <span class="comment">// publicPath：文件输出的公共路径，</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h2><blockquote><p>配置模块如何解析</p></blockquote><ul><li><code>extensions</code>：自动解析确定的扩展,省去你引入组件时写后缀的麻烦，</li><li><code>alias</code>：非常重要的一个配置，它可以配置一些短路径，</li><li><code>modules</code>：webpack 解析模块时应该搜索的目录，</li><li>…</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.jsx'</span>, <span class="string">'.ts'</span>, <span class="string">'.tsx'</span>, <span class="string">'.scss'</span>, <span class="string">'.json'</span>, <span class="string">'.css'</span>],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'@'</span>: path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    modules: [path.resolve(__dirname, <span class="string">'src'</span>), <span class="string">'node_modules'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="module-rules"><a href="#module-rules" class="headerlink" title="module.rules"></a>module.rules</h2><ul><li><code>rules</code>：也就是之前的 loaders，</li><li><code>test</code> ： 正则表达式，匹配编译的文件，</li><li><code>exclude</code>：排除特定条件，如通常会写 <code>node_modules</code>，即把某些目录/文件过滤掉，</li><li><code>include</code>：它正好与 <code>exclude</code> 相反，</li><li><code>use -loader</code> ：必须要有它，它相当于是一个 <code>test</code> 匹配到的文件对应的解析器，<code>babel-loader</code>、<code>style-loader</code>、<code>sass-loader</code>、<code>url-loader</code> 等等，</li><li><code>use - options</code>：它与 <code>loader</code> 配合使用，可以是一个字符串或对象，它的配置可以直接简写在 <code>loader</code> 内一起，它下面还有 <code>presets</code>、<code>plugins</code> 等属性；</li></ul><h2 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h2><p>// 另一篇文章 webpack - plugins 篇 敬请期待</p><h2 id="devtool"><a href="#devtool" class="headerlink" title="devtool"></a>devtool</h2><ul><li>控制是否生成，以及如何生成 source map 文件，开发环境下更有利于定位问题，默认 false,</li><li>当然它的开启，也会影响编译的速度，所以生产环境一定一定记得关闭；</li><li>常用的值：<code>cheap-eval-source-map</code>、<code>eval-source-map</code>、<code>cheap-module-eval-source-map</code>、<code>inline-cheap-module-source-map</code> 等等</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devtool: <span class="string">'eval-source-map'</span> <span class="comment">// 原始源代码</span></span><br></pre></td></tr></table></figure><h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><ul><li><code>contentBase</code> ：告诉服务(dev server)在哪里查找文件，默认不指定会在是当期项目根目录，</li><li><code>historyApiFallback</code>:可以是 boolean、 object，默认响应的入口文件，包括 404 都会指向这里，object 见下面示例：</li><li><code>compress</code>：启用 gzip 压缩，</li><li><code>publicPath</code>：它其实就是 output.publicPath，当你改变了它，即会覆盖了 output 的配置，</li><li><code>stats</code>： 可以自定控制要显示的编译细节信息，</li><li><code>proxy</code>：它其实就是 http-proxy-middleware，可以进行处理一些代理的请求。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase:<span class="string">'./assets'</span>,</span><br><span class="line">    port: <span class="number">1234</span>,</span><br><span class="line">    open: <span class="literal">true</span>, <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    compress: <span class="literal">true</span> <span class="comment">// 服务器压缩</span></span><br><span class="line">    hot: <span class="literal">true</span> <span class="comment">// 配合 HotModuleReplacementPlugin 使用</span></span><br><span class="line">    <span class="comment">//... proxy、hot</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="optimization"><a href="#optimization" class="headerlink" title="optimization"></a>optimization</h2><ul><li><code>optimization</code> 是 <code>webpack4</code> 新增的，主要是用来让开发者根据需要自定义一些优化构建打包的策略配置，</li><li><code>minimize</code>：true/false,告诉 webpack 是否开启代码最小化压缩，</li><li><code>minimizer</code>：自定 js 优化配置，会覆盖默认的配置，结合 <code>UglifyJsPlugin</code> 插件使用，</li><li><code>removeEmptyChunks</code>: bool 值，它检测并删除空的块。将设置为 false 将禁用此优化，</li><li><code>nodeEnv</code>：它并不是 node 里的环境变量，设置后可以在代码里使用 process.env.NODE_ENV === ‘development’来判断一些逻辑，生产环境 <code>UglifyJsPlugin</code> 会自动删除无用代码，</li><li><code>splitChunks</code> ：取代了 CommonsChunkPlugin，自动分包拆分、代码拆分，详细默认配置：</li><li>默认配置，只会作用于异步加载的代码块 —— chunks: ‘async’，它有三个值：all,async,initial</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 优化构建打包的策略配置</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimize: <span class="literal">true</span>, <span class="comment">// 是否开启代码最小化压缩 默认 false</span></span><br><span class="line">    <span class="comment">//splitChunks 默认配置</span></span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">'async'</span>,</span><br><span class="line">      minSize: <span class="number">30000</span>,</span><br><span class="line">      maxSize: <span class="number">0</span>,</span><br><span class="line">      minChunks: <span class="number">1</span>,</span><br><span class="line">      maxAsyncRequests: <span class="number">5</span>,</span><br><span class="line">      maxInitialRequests: <span class="number">3</span>,</span><br><span class="line">      automaticNameDelimiter: <span class="string">'~'</span>,</span><br><span class="line">      name: <span class="literal">true</span>,</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        vendors: &#123;</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          priority: <span class="number">-10</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">default</span>: &#123;</span><br><span class="line">          minChunks: <span class="number">2</span>,</span><br><span class="line">          priority: <span class="number">-20</span>,</span><br><span class="line">          reuseExistingChunk: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配合-UglifyJsPlugin"><a href="#配合-UglifyJsPlugin" class="headerlink" title="配合 UglifyJsPlugin"></a>配合 UglifyJsPlugin</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 优化构建打包的策略配置</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimizer: [</span><br><span class="line">      <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">        cache: <span class="literal">true</span>, <span class="comment">// 开启缓存</span></span><br><span class="line">        parallel: <span class="literal">true</span>, <span class="comment">// 开启多线程编译</span></span><br><span class="line">        sourceMap: <span class="literal">true</span>, <span class="comment">// 是否sourceMap</span></span><br><span class="line">        uglifyOptions: &#123;</span><br><span class="line">          <span class="comment">// 丑化参数</span></span><br><span class="line">          comments: <span class="literal">false</span>,</span><br><span class="line">          warnings: <span class="literal">false</span>,</span><br><span class="line">          compress: &#123;</span><br><span class="line">            unused: <span class="literal">true</span>,</span><br><span class="line">            dead_code: <span class="literal">true</span>,</span><br><span class="line">            collapse_vars: <span class="literal">true</span>,</span><br><span class="line">            reduce_vars: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          output: &#123;</span><br><span class="line">            comments: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://juejin.im/post/5be64a7bf265da615304493e#heading-9" target="_blank" rel="noopener">webpack4 配置详解之慢嚼细咽</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;entry&quot;&gt;&lt;a href=&quot;#entry&quot; class=&quot;headerlink&quot; title=&quot;entry&quot;&gt;&lt;/a&gt;entry&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param &amp;#123;String&amp;#125; - String 时 打包为一个文件，默认包名 main.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param &amp;#123;Array&amp;#125; - Array 时 webpack会把数组里所有文件打包成一个js文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param &amp;#123;Object&amp;#125; - Object 时 webpack会把对象里的文件分别打包成多个文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  entry: &lt;span class=&quot;string&quot;&gt;&#39;./index.js&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  entry: [&lt;span class=&quot;string&quot;&gt;&#39;./index.js&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;./about.js&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  entry: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    app: &lt;span class=&quot;string&quot;&gt;&#39;./index.js&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    about: &lt;span class=&quot;string&quot;&gt;&#39;./about.js&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  entry: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    app: &lt;span class=&quot;string&quot;&gt;&#39;./index.js&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    vendors: [&lt;span class=&quot;string&quot;&gt;&#39;jquery&#39;&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;// 分离第三方库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="webpack" scheme="https://weifo.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://weifo.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack - 入门篇</title>
    <link href="https://weifo.github.io/2019/10/10/webpack-%E5%85%A5%E9%97%A8/"/>
    <id>https://weifo.github.io/2019/10/10/webpack-入门/</id>
    <published>2019-10-10T14:09:14.000Z</published>
    <updated>2020-02-16T13:22:47.303Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://user-gold-cdn.xitu.io/2018/9/29/1662310b4cdab44f?w=1071&amp;h=604&amp;f=png&amp;s=62218" alt=""></p><h3 id="什么是-webpack"><a href="#什么是-webpack" class="headerlink" title="什么是 webpack"></a>什么是 webpack</h3><p>webpack 可以看做是模块打包机：他做的事情是，分析你的项目结构，找到 <code>JavaScript</code> 模块以及其他的一些浏览器不能直接运行的扩展语言（<code>Scss</code>、<code>TypeScript</code> 等），将其打包为合适的格式以供浏览器使用</p><p>构建就是把源代码转换成发布到线上可执行的 <code>JavaScript</code>、CSS、HTML 代码，包括以下内容：</p><ul><li><strong>代码转换</strong>：<code>TypeScript</code> 编译成 <code>JavaScript</code>、<code>SCSS</code> 编译成 CSS 等等</li><li><strong>文件优化</strong>：压缩 <code>JavaScript</code>、CSS、HTML 代码，压缩合并图片等</li><li><strong>代码分割</strong>：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载</li><li><strong>模块合并</strong>：在采用模块化的项目有很多模块和文件，需要构建功能把模块分类合并成一个文件</li><li><strong>自动刷新</strong>：监听本地源代码的变化，自动构建，刷新浏览器</li><li><strong>代码校验</strong>：在代码被提交到仓库前需要检测代码是否符合规范，以及单元测试是否通过</li><li><strong>自动发布</strong>：更新完代码后，自动构建出线上发布代码并传输给发布系统。</li></ul><p>构建其实是工程化、自动化思想在前端开发中的体现。把一系列流程用代码去实现，让代码自动化地执行这一系列复杂的流程。</p><a id="more"></a><h4 id="webpack-的基本概念"><a href="#webpack-的基本概念" class="headerlink" title="webpack 的基本概念"></a>webpack 的基本概念</h4><ul><li><p><a href="https://www.webpackjs.com/concepts/entry-points/" target="_blank" rel="noopener">入口(entry point)</a>: 指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始，webpack 会找出有哪些模块和 library 是入口起点（直接和间接）依赖的。</p><ul><li>默认值是 <code>./src/index.js</code>，然而，可以通过在 webpack 配置中配置 entry 属性，来指定一个不同的入口起点（或者也可以指定多个入口起点）。</li></ul></li><li><p><a href="https://www.webpackjs.com/concepts/output/" target="_blank" rel="noopener">出口 output</a>: 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件，主输出文件默认为 <code>./dist/main.js</code>，其他生成文件的默认输出目录是 <code>./dist</code></p></li><li><p><a href="https://www.webpackjs.com/concepts/loaders/" target="_blank" rel="noopener">loader</a>: 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。</p></li></ul><blockquote><p>注意，loader 能够 import 导入任何类型的模块（例如 .css 文件），这是 webpack 特有的功能，其他打包程序或任务执行器的可能并不支持。我们认为这种语言扩展是有很必要的，因为这可以使开发人员创建出更准确的依赖关系图。</p></blockquote><ul><li><p><a href="https://www.webpackjs.com/concepts/plugins/" target="_blank" rel="noopener">插件 plugins</a>: loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。</p></li><li><p><a href="https://www.webpackjs.com/concepts/mode/" target="_blank" rel="noopener">模式 mode</a>: 通过选择 <code>development</code> 或 <code>production</code> 之中的一个，来设置 mode 参数，你可以启用相应模式下的 webpack 内置的优化</p></li></ul><h4 id="webpack-构建过程"><a href="#webpack-构建过程" class="headerlink" title="webpack 构建过程"></a>webpack 构建过程</h4><ol><li>从 Entry 里配置的 Module 开始递归解析 Entry 依赖的所有 Module。</li><li>每找到一个 Module， 就会根据配置的 Loader 去找出对应的转换规则。</li><li>对 Module 进行转换后，再解析出当前 Module 依赖的 Module。</li><li>这些模块会以 Entry 为单位进行分组，一个 Entry 和其所有依赖的 Module 被分到一个组也就是一个 Chunk。</li><li>最后 Webpack 会把所有 Chunk 转换成文件输出。</li><li>在整个流程中 Webpack 会在恰当的时机执行 Plugin 里定义的逻辑。</li></ol><h3 id="开发环境和生产环境"><a href="#开发环境和生产环境" class="headerlink" title="开发环境和生产环境"></a>开发环境和生产环境</h3><p>我们在日常的前端开发工作中，一般都会有两套构建环境：一套开发时使用，一套供线上使用。</p><ul><li><strong>development</strong>: 用于开发的配置文件，用于定义 <code>webpack dev server</code> 和其他东西</li><li><strong>production</strong>: 用于生产的配置文件，用于定义 <code>UglifyJSPlugin</code>，<code>sourcemaps</code> 等</li></ul><p>简单来说，开发时可能需要打印 debug 信息，包含 <code>sourcemap</code> 文件，而生产环境是用于线上的即代码都是压缩后，运行时不打印 debug 信息等。譬如 axios、antd 等我们的生产环境中需要使用到那么我们应该安装该依赖在生产环境中，而 <code>webpack-dev-server</code> 则是需要安装在开发环境中</p><p>平时我们 <code>npm</code> 中安装的文件中有 -S -D, -D 表示我们的依赖是安装在开发环境的，而-S 的是安装依赖在生产环境中。</p><p>本文就来带你搭建基本的前端开发环境，前端开发环境需要什么呢？</p><ul><li>构建发布需要的 HTML、CSS、JS、图片等资源</li><li>使用 CSS 预处理器，这里使用 less</li><li>配置 babel 转码器 =&gt; 使用 es6+</li><li>处理和压缩图片</li><li>配置热加载，HMR</li></ul><p>以上配置就可以满足前端开发中需要的基本配置。下面是本文打包后的效果图：</p><p><img src="https://user-gold-cdn.xitu.io/2018/9/30/16629c066f166b7a?w=1420&amp;h=528&amp;f=png&amp;s=154990" alt=""></p><h3 id="搭建基本的开发环境"><a href="#搭建基本的开发环境" class="headerlink" title="搭建基本的开发环境"></a>搭建基本的开发环境</h3><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir webpack-dev &amp;&amp; cd webpack-dev</span><br><span class="line">npm init -y</span><br><span class="line">npm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure><h3 id="添加-scripts"><a href="#添加-scripts" class="headerlink" title="添加 scripts"></a>添加 scripts</h3><p>生成了 package.json 文件，在文件中添加</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">   "build": "webpack --mode production"</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>–<code>mode</code> 模式 (必选，不然会有 <code>WARNING</code>)，是 <code>webpack4</code> 新增的参数选项，默认是 <code>production</code></p></blockquote><ul><li><code>--mode production</code> 生产环境<ul><li>提供 <code>uglifyjs-webpack-plugin</code> 代码压缩</li><li>不需要定义 <code>new webpack.DefinePlugin({ &quot;process.env.NODE_ENV&quot;: JSON.stringify(&quot;production&quot;) })</code> 默认 <code>production</code></li><li>默认开启 <code>NoEmitOnErrorsPlugin -&gt; optimization.noEmitOnErrors</code>, 编译出错时跳过输出，以确保输出资源不包含错误</li><li>默认开启 <code>ModuleConcatenationPlugin</code> -&gt; <code>optimization.concatenateModules</code>, <code>webpack3</code> 添加的作用域提升(<code>Scope Hoisting</code>)</li></ul></li><li><code>--mode development</code> 开发环境<ul><li>使用 eval 构建 module, 提升增量构建速度</li><li>不需要定义 <code>new webpack.DefinePlugin({ &quot;process.env.NODE_ENV&quot;: JSON.stringify(&quot;development&quot;) })</code> 默认 <code>development</code></li><li>默认开启 <code>NamedModulesPlugin -&gt; optimization.namedModules</code> 使用模块热替换(HMR)时会显示模块的相对路径</li></ul></li></ul><p>添加了 scripts 之后，新建<code>src/index.js</code>，然后执行<code>npm run build</code> ，你就会发现新增了一个 <code>dist</code> 目录，里边存放的是 webpack 构建好的 <code>main.js</code> 文件。</p><p>ps <a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="noopener">npm scripts 使用指南</a></p><h3 id="新建-webpack-config-js-文件"><a href="#新建-webpack-config-js-文件" class="headerlink" title="新建 webpack.config.js 文件"></a>新建 webpack.config.js 文件</h3><p>要想对 webpack 中增加更多的配置信息，我们需要建立一个 webpack 的配置文件。在根目录下创建 <code>webpack.config.js</code> 后再执行 <code>webpack</code> 命令，webpack 就会使用这个配置文件的配置了</p><p>配置中具备以下的基本信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">''</span>, <span class="comment">// 打包入口：指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始</span></span><br><span class="line">  output: <span class="string">''</span>, <span class="comment">// 出口</span></span><br><span class="line">  resolve: &#123;&#125;, <span class="comment">// 配置解析：配置别名、extensions 自动解析确定的扩展等等</span></span><br><span class="line">  devServer: &#123;&#125;, <span class="comment">// 开发服务器：run dev/start 的配置，如端口、proxy等</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;&#125;, <span class="comment">// 模块配置：配置loader（处理非 JavaScript 文件，比如 less、sass、jsx、图片等等）等</span></span><br><span class="line">  plugins: [] <span class="comment">// 插件的配置：打包优化、资源管理和注入环境变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置打包入口和出口"><a href="#配置打包入口和出口" class="headerlink" title="配置打包入口和出口"></a>配置打包入口和出口</h4><p>首先我们往 <code>webpack.config.js</code> 添加点配置信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 指定打包入口</span></span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打包出口</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>), <span class="comment">// 解析路径为 ./dist</span></span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们定义了打包入口 <code>./src/index.js</code>，打包出口为 <code>./dist</code>, 打包的文件夹名字为<code>bundle.js</code>，执行<code>npm run build</code>命令后，index.js 文件会被打包为 <code>bundle.js</code> 文件。此时随便建立一个 html 文件引用这个<code>bundle.js</code>就可以看到你在<code>index.js</code> 写的代码了。</p><p><a href="http://nodejs.cn/api/path.html#path_path_resolve_paths" target="_blank" rel="noopener">path.resolve([…paths])</a> 方法会把一个路径或路径片段的序列解析为一个绝对路径。</p><h3 id="使用-html-webpack-plugin-创建-html-文件"><a href="#使用-html-webpack-plugin-创建-html-文件" class="headerlink" title="使用 html-webpack-plugin 创建 html 文件"></a>使用 html-webpack-plugin 创建 html 文件</h3><p>更多情况下我们不希望打包一次，就新建一次 html 文件来引用打包后的文件，这样显得不智能或者说当你打包的文件名修改后，引用路径就会出错。</p><p>这个时候我们就可以使用 <a href="https://webpack.docschina.org/plugins/html-webpack-plugin/" target="_blank" rel="noopener">html-webpack-plugin</a> 插件来将 HTML 引用路径和我们的构建结果关联起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin -D</span><br></pre></td></tr></table></figure><p>创建文件<code>public/index.html</code> 修改 <code>webpack.config.js</code> 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'index.html'</span>, <span class="comment">// 配置输出文件名和路径</span></span><br><span class="line">      template: <span class="string">'./public/index.html'</span> <span class="comment">// 配置要被编译的html文件</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新执行 <code>npm run build</code>, dist 目录就会多个 <code>index.html</code> 并引入了 <code>bundle.js</code>.</p><h4 id="压缩-html-文件"><a href="#压缩-html-文件" class="headerlink" title="压缩 html 文件"></a>压缩 html 文件</h4><p>修改 <code>webpack.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'index.html'</span>, <span class="comment">// 配置输出文件名和路径</span></span><br><span class="line">      template: <span class="string">'./public/index.html'</span>, <span class="comment">// 配置要被编译的html文件</span></span><br><span class="line">      hash: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 压缩 =&gt; production 模式使用</span></span><br><span class="line">      minify: &#123;</span><br><span class="line">        removeAttributeQuotes: <span class="literal">true</span>, <span class="comment">//删除双引号</span></span><br><span class="line">        collapseWhitespace: <span class="literal">true</span> <span class="comment">//折叠 html 为一行</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打包-css-文件"><a href="#打包-css-文件" class="headerlink" title="打包 css 文件"></a>打包 css 文件</h3><p>我们希望使用 webpack 来进行构建 css 文件，，为此，需要在配置中引入 loader 来解析和处理 CSS 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install style-loader css-loader -D</span><br></pre></td></tr></table></figure><p>新建 <code>src/assets/style/color.css</code>, 修改 <code>webpack.config.js</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * test: 匹配特定条件。一般是提供一个正则表达式或正则表达式的数组</span></span><br><span class="line"><span class="comment">     * include: 匹配特定条件。一般是提供一个字符串或者字符串数组</span></span><br><span class="line"><span class="comment">     * exclude: 排除特定条件</span></span><br><span class="line"><span class="comment">     * and: 必须匹配数组中的所有条件</span></span><br><span class="line"><span class="comment">     * or: 匹配数组中任何一个条件,</span></span><br><span class="line"><span class="comment">     * nor: 必须排除这个条件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        include: [path.resolve(__dirname, <span class="string">'src'</span>)],</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经由上述两个 loader 的处理后，CSS 代码会转变为 JS， 如果需要单独把 CSS 文件分离出来，我们需要使用 <a href="https://github.com/webpack-contrib/mini-css-extract-plugin" target="_blank" rel="noopener">mini-css-extract-plugin</a> 插件</p><h4 id="抽取-css-到独立文件-自动添加前缀"><a href="#抽取-css-到独立文件-自动添加前缀" class="headerlink" title="抽取 css 到独立文件, 自动添加前缀"></a>抽取 css 到独立文件, 自动添加前缀</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mini-css-extract-plugin postcss-loader autoprefixer -D</span><br></pre></td></tr></table></figure><p>我们在写 css 时不免要考虑到浏览器兼容问题，如 <code>transform</code> 属性，需要添加浏览器前缀以适配其他浏览器。故使用到 <code>postcss-loader</code> 这个 loader， 下面则是相关的配置</p><p><code>webpack.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        include: [path.resolve(__dirname, <span class="string">'src'</span>)],</span><br><span class="line">        use: [</span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          <span class="string">'css-loader'</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              plugins: [<span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'[name].css'</span>,</span><br><span class="line">      chunkFilename: <span class="string">'[id].css'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打包-less-文件"><a href="#打包-less-文件" class="headerlink" title="打包 less 文件"></a>打包 less 文件</h4><p>开发中通常会用到一门预处理语言，这里以<code>less</code>为例，通过<code>less-loader</code>可以打包 less 为 css 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less less-loader -D</span><br></pre></td></tr></table></figure><p>新建 <code>src/assets/style/index.less</code>, 并且在 <code>src/index.js</code> 中引入 <code>import &#39;./assets/style/index.less&#39;</code></p><p>配置 <code>webpack.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          <span class="string">'css-loader'</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              plugins: [<span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)] <span class="comment">// 添加css中的浏览器前缀</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">'less-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执打包命令后就可以发现 <code>index.less</code> 中写的样式会和<code>color.css</code>一样被打包进 <code>main.css</code>中。</p><p><a href="https://segmentfault.com/a/1190000014396803?utm_source=tag-newest" target="_blank" rel="noopener">webpack@v4 升级踩坑</a>: 关于使用 <code>mini-css-extract-plugin</code> 的注意点。</p><h3 id="打包图片"><a href="#打包图片" class="headerlink" title="打包图片"></a>打包图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install file-loader url-loader -D</span><br></pre></td></tr></table></figure><p><strong>file-loader:</strong> 可以用于处理很多类型的文件，它的主要作用是直接输出文件，把构建后的文件路径返回。</p><p><strong>url-loader:</strong><br>如果图片较多，会发很多 http 请求，会降低页面性能。<code>url-loader</code> 会将引入的图片编码，生成 dataURl。相当于把图片数据翻译成一串字符。再把这串字符打包到文件中，最终只需要引入这个文件就能访问图片了。当然，如果图片较大，编码会消耗性能。因此 <code>url-loader</code> 提供了一个 limit 参数，小于 limit 字节的文件会被转为 DataURl，大于 limit 的还会使用 <code>file-loader</code> 进行 copy。</p><ul><li>url-loader 可以看作是增强版的 file-loader。</li><li>url-loader 把图片编码成 base64 格式写进页面，从而减少服务器请求。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              outputPath: <span class="string">'images/'</span>, <span class="comment">//输出到images文件夹</span></span><br><span class="line">              limit: <span class="number">500</span> <span class="comment">//是把小于500B的文件打成Base64的格式，写入JS</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>url-loader 和 file-loader 是什么关系呢？</strong></p><p>简单地说，<code>url-loader</code> 封装了 <code>file-loader</code>。<code>url-loader</code> 不依赖于 <code>file-loader</code>，即使用 <code>url-loader</code> 时，只需要安装 <code>url-loader</code> 即可，不需要安装 <code>file-loader</code>，因为 <code>url-loader</code> 内置了 <code>file-loader</code>。</p><p>通过上面的介绍，我们可以看到，url-loader 工作分两种情况：</p><ul><li>文件大小小于 limit 参数，url-loader 将会把文件转为 DataURL；</li><li>文件大小大于 limit，url-loader 会调用 file-loader 进行处理，参数也会直接传给 file-loader。因此我们只需要安装 url-loader 即可。</li></ul><p>有关 <code>url-loader</code> 和 <code>file-loader</code> 的解析：<a href="https://blog.csdn.net/hdchangchang/article/details/80175782" target="_blank" rel="noopener">webpack 之图片引入-增强的 file-loader：url-loader</a></p><h3 id="配置-babel"><a href="#配置-babel" class="headerlink" title="配置 babel"></a>配置 babel</h3><h4 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h4><p><code>Babel</code> 是一个让我们能够使用 ES 新特性的 JS 编译工具，我们可以在 webpack 中配置 Babel，以便使用 ES6、ES7 标准来编写 JS 代码。</p><p>Babel 7 的相关依赖包需要加上 <code>@babel</code> scope。一个主要变化是 presets 设置由原来的 <code>env</code> 换成了 <code>@babel/preset-env</code>, 可以配置 <code>targets</code>, <code>useBuiltIns</code> 等选项用于编译出兼容目标环境的代码。其中 <code>useBuiltIns</code> 如果设为 <code>&quot;usage&quot;</code>，Babel 会根据实际代码中使用的 ES6/ES7 代码，以及与你指定的 targets，按需引入对应的 <code>polyfill</code>，而无需在代码中直接引入 <code>import &#39;@babel/polyfill&#39;</code>，避免输出的包过大，同时又可以放心使用各种新语法特性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-loader @babel/core @babel/preset-env -D</span><br></pre></td></tr></table></figure><p>笔者这里配的版本号如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"babel-loader"</span>: <span class="string">"^8.0.4"</span>,</span><br><span class="line">  <span class="attr">"@babel/core"</span>: <span class="string">"^7.1.2"</span>,</span><br><span class="line">  <span class="attr">"@babel/preset-env"</span>: <span class="string">"^7.1.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.npmjs.com/package/babel-loader" target="_blank" rel="noopener">babel-loader</a>: 用 babel 转换 ES6 代码需要使用到 <code>babel-loader</code></li><li><a href="https://www.npmjs.com/package/@babel/preset-env" target="_blank" rel="noopener">@babel-preset-env</a>： 默认情况下是等于 ES2015 + ES2016 + ES2017，也就是说它对这三个版本的 ES 语法进行转化。</li><li><a href="https://www.npmjs.com/package/@babel/core" target="_blank" rel="noopener">@babel/core</a>：babel 核心库</li></ul><p>根目录下新建 <code>.babelrc</code> 文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"@babel/preset-env"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"modules"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"targets"</span>: &#123;</span><br><span class="line">          <span class="attr">"browsers"</span>: [<span class="string">"&gt; 1%"</span>, <span class="string">"last 2 versions"</span>, <span class="string">"not ie &lt;= 8"</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"useBuiltIns"</span>: <span class="string">"usage"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>presets 是一堆 plugins 的预设，起到方便的作用。</li><li>plugins 是编码转化工具，babel 会根据你配置的插件对代码进行相应的转化。</li></ul><p>修改 <code>webpack.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.m?js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'babel-loader'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="babel-polyfill-和-transform-runtime"><a href="#babel-polyfill-和-transform-runtime" class="headerlink" title="babel/polyfill 和 transform-runtime"></a>babel/polyfill 和 transform-runtime</h4><blockquote><p>Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API ，比如 Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转码。</p></blockquote><ul><li>babel-polyfill: 如上述所说，对于新的 API，你可能需要引入 babel-polyfill 来进行兼容</li><li><p>关键点</p><ul><li>babel-polyfill 是为了模拟一个完整的 ES2015+环境，旨在用于应用程序而不是库/工具。</li><li>babel-polyfill 会污染全局作用域</li></ul></li></ul><p>babel-runtime 的作用：</p><ul><li><strong>提取辅助函数</strong>。ES6 转码时，babel 会需要一些辅助函数，例如 _extend。babel 默认会将这些辅助函数内联到每一个 js 文件里， babel 提供了 transform-runtime 来将这些辅助函数“搬”到一个单独的模块 babel-runtime 中，这样做能减小项目文件的大小。</li><li><strong>提供 polyfill</strong>：不会污染全局作用域，但是不支持实例方法如 Array.includes</li></ul><p><code>babel-runtime</code> 更像是分散的 polyfill 模块，需要在各自的模块里单独引入，借助 <code>transform-runtime</code> 插件来自动化处理这一切，也就是说你不要在文件开头 import 相关的 <code>polyfill</code>，你只需使用，<code>transform-runtime</code> 会帮你引入。</p><p>对于开发应用来说，直接使用上述的按需 <code>polyfill</code> 方案是比较方便的，但如果是开发工具、库的话，这种方案未必适合（<code>babel-polyfill</code> 是通过向全局对象和内置对象的 <code>prototype</code> 上添加方法实现的，会造成全局变量污染）。Babel 提供了另外一种方案 <code>transform-runtime</code>，它在编译过程中只是将需要 <code>polyfill</code> 的代码引入了一个指向 <code>core-js</code> 中对应模块的链接(alias)。关于这两个方案的具体差异和选择，可以自行搜索相关教程，这里不再展开，下面提供一个 <code>transform-runtime</code> 的参考配置方案。</p><ul><li>首先安装 runtime 相关依赖</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i @babel/plugin-transform-runtime -D</span><br><span class="line">npm i @babel/runtime -S</span><br></pre></td></tr></table></figure><p>修改 <code>.babelrc</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  //...</span><br><span class="line">  "plugins": ["@babel/plugin-transform-runtime"]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打包前清理源目录文件-clean-webpack-plugin"><a href="#打包前清理源目录文件-clean-webpack-plugin" class="headerlink" title="打包前清理源目录文件 clean-webpack-plugin"></a>打包前清理源目录文件 clean-webpack-plugin</h3><p>每次打包，都会生成项目的静态资源，随着某些文件的增删，我们的 dist 目录下可能产生一些不再使用的静态资源，webpack 并不会自动判断哪些是需要的资源，为了不让这些旧文件也部署到生产环境上占用空间，所以在 webpack 打包前最好能清理 dist 目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install clean-webpack-plugin -D</span><br></pre></td></tr></table></figure><p>修改 <code>webpack.config.js</code> 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [<span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>])]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="提取公用代码"><a href="#提取公用代码" class="headerlink" title="提取公用代码"></a>提取公用代码</h3><p>假如你 <code>a.js</code> 和 <code>b.js</code> 都 import 了 <code>c.js</code> 文件，这段代码就冗杂了。为什么要提取公共代码，简单来说，就是减少代码冗余，提高加载速度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        commons: &#123;</span><br><span class="line">          <span class="comment">// 抽离自己写的公共代码</span></span><br><span class="line">          chunks: <span class="string">'initial'</span>,</span><br><span class="line">          name: <span class="string">'common'</span>, <span class="comment">// 打包后的文件名，任意命名</span></span><br><span class="line">          minChunks: <span class="number">2</span>, <span class="comment">//最小引用2次</span></span><br><span class="line">          minSize: <span class="number">0</span> <span class="comment">// 只要超出0字节就生成一个新包</span></span><br><span class="line">        &#125;,</span><br><span class="line">        styles: &#123;</span><br><span class="line">          name: <span class="string">'styles'</span>, <span class="comment">// 抽离公用样式</span></span><br><span class="line">          test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">          chunks: <span class="string">'all'</span>,</span><br><span class="line">          minChunks: <span class="number">2</span>,</span><br><span class="line">          enforce: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        vendor: &#123;</span><br><span class="line">          <span class="comment">// 抽离第三方插件</span></span><br><span class="line">          test: <span class="regexp">/node_modules/</span>, <span class="comment">// 指定是node_modules下的第三方包</span></span><br><span class="line">          chunks: <span class="string">'initial'</span>,</span><br><span class="line">          name: <span class="string">'vendor'</span>, <span class="comment">// 打包后的文件名，任意命名</span></span><br><span class="line">          <span class="comment">// 设置优先级，防止和自定义的公共代码提取时被覆盖，不进行打包</span></span><br><span class="line">          priority: <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>hash 是干嘛用的？<br>我们每次打包出来的结果可能都是同一个文件，那我上线的时候是不是要替换掉上线的 js，那我怎么知道哪是最新的呢，我们一般会清一下缓存。而 hash 就是为了解决这个问题而存在的</p><p>我们此时在改一些 webpack.config.js 的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'[name].[hash:8].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'[name].[hash:8].css'</span>,</span><br><span class="line">      chunkFilename: <span class="string">'[id].[hash:8].css'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="减少-resolve-的解析，配置别名"><a href="#减少-resolve-的解析，配置别名" class="headerlink" title="减少 resolve 的解析，配置别名"></a>减少 resolve 的解析，配置别名</h3><p>如果我们可以精简 <code>resolve</code> 配置，让 <code>webpack</code> 在查询模块路径时尽可能快速地定位到需要的模块，不做额外的查询工作，那么 <code>webpack</code> 的构建速度也会快一些</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * alias: 别名的配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * extensions: 自动解析确定的扩展,</span></span><br><span class="line"><span class="comment">     *    比如 import 'xxx/theme.css' 可以在extensions 中添加 '.css'， 引入方式则为 import 'xxx/theme'</span></span><br><span class="line"><span class="comment">     *    @default ['.wasm', '.mjs', '.js', '.json']</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * modules 告诉 webpack 解析模块时应该搜索的目录</span></span><br><span class="line"><span class="comment">     *   如果你想要添加一个目录到模块搜索目录，此目录优先于 node_modules/ 搜索</span></span><br><span class="line"><span class="comment">     *   这样配置在某种程度上可以简化模块的查找，提升构建速度 @default node_modules 优先</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'@'</span>: path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">      tool$: path.resolve(__dirname, <span class="string">'src/utils/tool.js'</span>) <span class="comment">// 给定对象的键后的末尾添加 $，以表示精准匹配</span></span><br><span class="line">    &#125;,</span><br><span class="line">    extensions: [<span class="string">'.wasm'</span>, <span class="string">'.mjs'</span>, <span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.jsx'</span>],</span><br><span class="line">    modules: [path.resolve(__dirname, <span class="string">'src'</span>), <span class="string">'node_modules'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="webpack-dev-serve"><a href="#webpack-dev-serve" class="headerlink" title="webpack-dev-serve"></a>webpack-dev-serve</h3><p>上面讲到了都是如何打包文件，但是开发中我们需要一个本地服务，这时我们可以使用 <code>webpack-dev-server</code> 在本地开启一个简单的静态服务来进行开发。</p><p><code>webpack-dev-server</code> 是 webpack 官方提供的一个工具，可以基于当前的 webpack 构建配置快速启动一个静态服务。当 <code>mode</code> 为 <code>development</code> 时，会具备 <code>hot reload</code> 的功能，即当源码文件变化时，会即时更新当前页面，以便你看到最新的效果。…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-server -D</span><br></pre></td></tr></table></figure><p>package.json 中 scripts 中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;start&quot;: &quot;webpack-dev-server --mode development&quot;</span><br></pre></td></tr></table></figure><p>默认开启一个本地服务的窗口 <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> 便于开发</p><h4 id="配置开发服务器"><a href="#配置开发服务器" class="headerlink" title="配置开发服务器"></a>配置开发服务器</h4><p>我们可以对 <code>webpack-dev-server</code> 做针对性的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 配置开发服务器</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: <span class="number">1234</span>,</span><br><span class="line">    open: <span class="literal">true</span>, <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    compress: <span class="literal">true</span> <span class="comment">// 服务器压缩</span></span><br><span class="line">    <span class="comment">//... proxy、hot</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>contentBase: 服务器访问的根目录（可用于访问静态资源）</li><li>port: 端口</li><li>open: 自动打开浏览器</li></ul><h3 id="模块热替换-hot-module-replacement"><a href="#模块热替换-hot-module-replacement" class="headerlink" title="模块热替换(hot module replacement)"></a>模块热替换(hot module replacement)</h3><p>模块热替换(<code>HMR - Hot Module Replacement</code>)功能会在应用程序运行过程中替换、添加或删除模块，而无需重新加载整个页面。主要是通过以下几种方式，来显著加快开发速度：</p><ul><li>保留在完全重新加载页面时丢失的应用程序状态。</li><li>只更新变更内容，以节省宝贵的开发时间。</li><li>调整样式更加快速 - 几乎相当于在浏览器调试器中更改样式。</li></ul><p>上面我们 <code>npm start</code> 后修改一次文件，页面就会刷新一次。这样就存在很大问题了，比如我们使用 <code>redux</code>, <code>vuex</code> 等插件，页面一刷新那么存放在 <code>redux</code>, <code>vuex</code> 中的东西就会丢失，非常不利于我们的开发。</p><p>HMR 配合 webpack-dev-server ，首先我们配置下 webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    hot: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置后还不行，因为 webpack 还不知道你要更新哪里, 修改 <code>src/index.js</code> 文件, 添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">  <span class="built_in">module</span>.hot.accept()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启服务，<code>npm start</code> 之后，修改引入 <code>index.js</code> 文件后，页面就不会重新刷新了，这便实现了 HMR</p><p>但是但是有个问题是，你修改 css/less 等样式文件并未发生改变， what ?</p><p>HMR 修改样式表 需要借助于 <code>style-loader</code>， 而我们之前用的是 <code>MiniCssExtractPlugin.loader</code>， 这也好办，修改其中一个 rules 就可以了，我们可以试试改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="comment">// MiniCssExtractPlugin.loader,</span></span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          <span class="string">'css-loader'</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              plugins: [<span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)] <span class="comment">// 添加css中的浏览器前缀</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">'less-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们修改 less 文件就会发现 HMR 已经实现了。</p><p>其实，我们可以发现，dev 下配置的 loader 为 <code>style-loader</code> , 而生产环境下则是需要 <code>MiniCssExtractPlugin.loader</code></p><p>这就涉及到了不同环境之间的配置。可以通过 <code>process.env.NODE_ENV</code> 获取当前是开发环境或者是生产环境，然后配置不同的 loader，这里就不做展开了。下一篇文章打算在做一个 <code>react-cli</code> 或者 <code>vue-cli</code> 的配置，将开发环境的配置与生产环境的配置分开为不同的文件。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>前面讲到的知识都是 webpack 的一些基础的知识，更多的资料可以查询<a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack 中文官网</a>，官网讲的比较详细，我这里也是讲最常的配置，也是一篇入门系列的文章，文中涉及的知识点还有很多地方还需要完善，譬如 优化 webpack 的构建速度， 减小打包的体积等等。</p><p>学习 <code>webpack 4.0</code> 还需要多实践，多瞎搞，笔者也是刚刚学习 webpack 的配置，不对之处请各位指出。</p><p>下一篇文章打算从零配置一个脚手架，以加深自己对 webpack 的理解。</p><p>本文产生的代码：<a href="https://github.com/gershonv/my-code-store/tree/master/webpack/webpack-dev" target="_blank" rel="noopener">webpack-dev</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://juejin.im/post/5b2b9a00e51d45587b48075e#heading-0" target="_blank" rel="noopener">webpack4.x 入门一篇足矣</a></li><li><a href="https://segmentfault.com/a/1190000014466696?utm_source=index-hottest/*&amp;%5E%25$#articleHeader0" target="_blank" rel="noopener">Webpack4 不深不浅的实践教程</a></li><li><a href="https://juejin.im/post/5b3834e051882574ce2f3dd9" target="_blank" rel="noopener">webpack 之 babel 配置和 HMR</a></li><li><a href="https://segmentfault.com/a/1190000015247255" target="_blank" rel="noopener">使用 webpack 4 和 Babel 7 配置 Vue.js 工程模板</a></li><li><a href="https://juejin.im/post/5b3daf2ee51d451962727fbe" target="_blank" rel="noopener">webpack 4 ：从 0 配置到项目搭建</a></li><li><a href="https://juejin.im/post/5aa3d2056fb9a028c36868aa" target="_blank" rel="noopener">webpack 详解</a></li><li><a href="https://juejin.im/post/5b4609f5e51d4519596b66a7" target="_blank" rel="noopener">手写一个 webpack4.0 配置</a></li><li><a href="https://juejin.im/entry/5b552985f265da0f697036b2" target="_blank" rel="noopener">Webpack 4 教程：从零配置到生产发布（2018）</a></li><li><a href="https://juejin.im/post/5badd0c5e51d450e4437f07a" target="_blank" rel="noopener">Webpack 揭秘——走向高阶前端的必经之路</a></li><li><a href="https://www.bilibili.com/video/av25439651?from=search&amp;seid=14183256954711376795" target="_blank" rel="noopener">珠峰架构师培训公开课 webpack4.0 进阶</a></li><li><a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack 官网</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/9/29/1662310b4cdab44f?w=1071&amp;amp;h=604&amp;amp;f=png&amp;amp;s=62218&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是-webpack&quot;&gt;&lt;a href=&quot;#什么是-webpack&quot; class=&quot;headerlink&quot; title=&quot;什么是 webpack&quot;&gt;&lt;/a&gt;什么是 webpack&lt;/h3&gt;&lt;p&gt;webpack 可以看做是模块打包机：他做的事情是，分析你的项目结构，找到 &lt;code&gt;JavaScript&lt;/code&gt; 模块以及其他的一些浏览器不能直接运行的扩展语言（&lt;code&gt;Scss&lt;/code&gt;、&lt;code&gt;TypeScript&lt;/code&gt; 等），将其打包为合适的格式以供浏览器使用&lt;/p&gt;
&lt;p&gt;构建就是把源代码转换成发布到线上可执行的 &lt;code&gt;JavaScript&lt;/code&gt;、CSS、HTML 代码，包括以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;代码转换&lt;/strong&gt;：&lt;code&gt;TypeScript&lt;/code&gt; 编译成 &lt;code&gt;JavaScript&lt;/code&gt;、&lt;code&gt;SCSS&lt;/code&gt; 编译成 CSS 等等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件优化&lt;/strong&gt;：压缩 &lt;code&gt;JavaScript&lt;/code&gt;、CSS、HTML 代码，压缩合并图片等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代码分割&lt;/strong&gt;：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模块合并&lt;/strong&gt;：在采用模块化的项目有很多模块和文件，需要构建功能把模块分类合并成一个文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动刷新&lt;/strong&gt;：监听本地源代码的变化，自动构建，刷新浏览器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代码校验&lt;/strong&gt;：在代码被提交到仓库前需要检测代码是否符合规范，以及单元测试是否通过&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动发布&lt;/strong&gt;：更新完代码后，自动构建出线上发布代码并传输给发布系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;构建其实是工程化、自动化思想在前端开发中的体现。把一系列流程用代码去实现，让代码自动化地执行这一系列复杂的流程。&lt;/p&gt;
    
    </summary>
    
      <category term="webpack" scheme="https://weifo.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://weifo.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>面试题积累</title>
    <link href="https://weifo.github.io/2019/07/16/%E9%9A%8F%E7%AC%94-%E9%9D%A2%E8%AF%95/"/>
    <id>https://weifo.github.io/2019/07/16/随笔-面试/</id>
    <published>2019-07-16T12:46:54.000Z</published>
    <updated>2020-02-16T13:23:05.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><ul><li>匹配整数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'102'</span></span><br><span class="line"><span class="comment">// 1.  ^(-|\+) 以 - 或者 + 开头</span></span><br><span class="line"><span class="comment">// 2. ? 表示出现或者不出现</span></span><br><span class="line"><span class="comment">// 3. [1-9] 取值范围，也是首字符的取值范围</span></span><br><span class="line"><span class="comment">// 4. \d*$ ：* 等价于&#123;0,&#125;，表示出现任意次，有可能不出现。</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(-|\+)?[1-9]\d*$/</span></span><br><span class="line">reg.test(str)</span><br></pre></td></tr></table></figure><ul><li>用正则把<code>[1,2,3,4]</code>转换成 <code>&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;</code></li></ul><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].join().replace(<span class="regexp">/([^,])/g</span>, <span class="string">"'$1'"</span>) <span class="comment">// 逗号结尾的字符分组，加引号</span></span><br></pre></td></tr></table></figure><ul><li><code>dgfhfgh254bhku289fgdhdy675gfh</code> 输出 <code>[254,289,675]</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'dgfhfgh254bhku289fgdhdy675gfh'</span></span><br><span class="line">str.replace(<span class="regexp">/\d&#123;3&#125;/g</span>, $<span class="number">1</span> =&gt; arr.push(+$<span class="number">1</span>)) <span class="comment">// 匹配出现3个数字的字符，+$1 转化为整数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// question 假如要匹配连续出现的数字呢？ ↓↓↓</span></span><br><span class="line">str.replace(<span class="regexp">/\d+/g</span>, $<span class="number">1</span> =&gt; arr.push(+$<span class="number">1</span>)) <span class="comment">// + 匹配至少出现一次的数字</span></span><br></pre></td></tr></table></figure><ul><li>匹配数字范围</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 限制 1000-2000，整数</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/^-?(?:[0-9]&#123;1,3&#125;|1000)$/</span></span><br></pre></td></tr></table></figure><ul><li>字符串去重，把 aaacabbbccc 变成 abc</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'aaacabbbbcccc'</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(.).*\1/g</span></span><br><span class="line">str.replace(reg, <span class="string">'$1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// \1 表示的引用之前的那个分组 不管它匹配到什么（比如-），\1都匹配那个同样的具体某个字符。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w)\1+/g</span> <span class="comment">// 匹配连续出现的字符</span></span><br></pre></td></tr></table></figure><ul><li>匹配一年中的 12 个月</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'12'</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(0?[1-9]|1[0-2])$/g</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首位 0 时，第二位 1-9</span></span><br><span class="line"><span class="comment">// 首位 1 时，第二位 0-2</span></span><br></pre></td></tr></table></figure><h3 id="理论补充"><a href="#理论补充" class="headerlink" title="理论补充"></a>理论补充</h3><ul><li>非捕获分组 <code>?:</code><blockquote><p><code>(?:)</code>会作为匹配校验，并出现在匹配结果字符里面，但不作为子匹配返回。</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/1(2)/</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/1(?:2)/</span></span><br><span class="line"></span><br><span class="line"><span class="string">'12'</span>.match(reg1) <span class="comment">// "12", "2"...</span></span><br><span class="line"><span class="string">'12'</span>.match(reg2) <span class="comment">// "12", ...</span></span><br></pre></td></tr></table></figure><h3 id="作用域，-eventLoop，异步…"><a href="#作用域，-eventLoop，异步…" class="headerlink" title="作用域， eventLoop，异步…"></a>作用域， eventLoop，异步…</h3><ol><li>经典题</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;, i * <span class="number">1000</span>)</span><br><span class="line">&#125; <span class="comment">// 结果：每一秒输出一个5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// settimeout 是异步, 每一秒在任务队列中添加任务。等主线执行完成后再执行任务队列里的任务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> =&gt; <span class="keyword">let</span> <span class="comment">// 解决变量作用域</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为for循环头部的let不仅将i绑定到for循环快中，事实上它将其重新绑定到循环体的每一次迭代中，确保上一次迭代结束的值重新被赋值。</span></span><br><span class="line"><span class="comment">// setTimeout里面的function()属于一个新的域，通过 var 定义的变量是无法传入到这个函数执行域中的，通过使用 let 来声明块变量，</span></span><br><span class="line"><span class="comment">// 这时候变量就能作用于这个块，所以 function就能使用 i 这个变量了</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>this</code> 的考察</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  y = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    x = <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">3</span></span><br><span class="line">    y()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x)</span><br><span class="line">  &#125;.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ol start="3"><li>变量提升</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    a++</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span></span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">  &#125;</span><br><span class="line">  inner()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">outer() <span class="comment">// NaN 3</span></span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>遍历 <code>html</code> 中所有 <code>dom</code> 节点，并计算 <code>dom</code> 节点数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> doms = []</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getChildren</span>(<span class="params">parent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (parent.children.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; parent.children.length; i++) &#123;</span><br><span class="line">      getChildren(parent.children[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (parent.nodeType === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// parent.nodeType === 1：节点是一个元素节点</span></span><br><span class="line">    doms.push(parent)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getChildren(<span class="built_in">document</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(doms)</span><br></pre></td></tr></table></figure><ul><li>随机数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> random = <span class="function">(<span class="params">m, n</span>) =&gt;</span> m + <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (n - m))</span><br><span class="line"></span><br><span class="line">random(<span class="number">1</span>, <span class="number">4</span>) <span class="comment">// 产生 1-4 之间的随机数</span></span><br></pre></td></tr></table></figure><ul><li>实现数组乱序</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = array.length</span><br><span class="line">  <span class="keyword">let</span> temp</span><br><span class="line">  <span class="keyword">while</span> (len) &#123;</span><br><span class="line">    <span class="keyword">const</span> i = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * len--)</span><br><span class="line">    temp = array[len]</span><br><span class="line">    array[len] = array[i]</span><br><span class="line">    array[i] = temp</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line">shuffle([<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Javascript&quot;&gt;&lt;a href=&quot;#Javascript&quot; class=&quot;headerlink&quot; title=&quot;Javascript&quot;&gt;&lt;/a&gt;Javascript&lt;/h2&gt;&lt;h3 id=&quot;正则&quot;&gt;&lt;a href=&quot;#正则&quot; class=&quot;headerlink&quot; title=&quot;正则&quot;&gt;&lt;/a&gt;正则&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;匹配整数&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;string&quot;&gt;&#39;102&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1.  ^(-|\+) 以 - 或者 + 开头&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2. ? 表示出现或者不出现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3. [1-9] 取值范围，也是首字符的取值范围&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 4. \d*$ ：* 等价于&amp;#123;0,&amp;#125;，表示出现任意次，有可能不出现。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; reg = &lt;span class=&quot;regexp&quot;&gt;/^(-|\+)?[1-9]\d*$/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reg.test(str)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;用正则把&lt;code&gt;[1,2,3,4]&lt;/code&gt;转换成 &lt;code&gt;&amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;3&amp;#39;, &amp;#39;4&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="开发随笔" scheme="https://weifo.github.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="面试系列" scheme="https://weifo.github.io/tags/%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>js - 笔试题收集</title>
    <link href="https://weifo.github.io/2019/07/11/%E9%9A%8F%E7%AC%94-%E9%9D%A2%E8%AF%952/"/>
    <id>https://weifo.github.io/2019/07/11/随笔-面试2/</id>
    <published>2019-07-11T11:57:47.000Z</published>
    <updated>2020-02-16T13:24:05.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="提取-get-请求参数"><a href="#提取-get-请求参数" class="headerlink" title="提取 get 请求参数"></a>提取 get 请求参数</h2><p>有这样一个 URL：<a href="http://item.taobao.com/item.htm?a=1&amp;b=2&amp;c=&amp;d=xxx&amp;e，请写一段JS程序提取URL中的各个GET参数(参数名和参数个数不确定)，将其按key-value形式返回到一个json结构中，如`{a:&#39;1&#39;" target="_blank" rel="noopener">http://item.taobao.com/item.htm?a=1&amp;b=2&amp;c=&amp;d=xxx&amp;e，请写一段JS程序提取URL中的各个GET参数(参数名和参数个数不确定)，将其按key-value形式返回到一个json结构中，如`{a:&#39;1&#39;</a>, b:’2’, c:’’, d:’xxx’, e:undefined}`。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'http://item.taobao.com/item.html?a=1&amp;b=2&amp;c=&amp;d=xxx&amp;e&amp;a=2'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> params = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> paramsStr = str.replace(<span class="regexp">/.*\?/</span>, <span class="string">''</span>) <span class="comment">// 提取参数字符串</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// [ 'a=1', 'b=2', 'c=', 'd=xxx', 'e' ]</span></span><br><span class="line">  paramsStr.split(<span class="string">'&amp;'</span>).forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    d = v.split(<span class="string">'='</span>) <span class="comment">// [a, 1] [b, 2] [c, ''] [d, xxx] [e]</span></span><br><span class="line">    <span class="keyword">if</span> (d[<span class="number">0</span>] <span class="keyword">in</span> params) &#123;</span><br><span class="line">      <span class="built_in">Array</span>.isArray(params[d[<span class="number">0</span>]]) ? params[d[<span class="number">0</span>]].push(d[<span class="number">1</span>]) : (params[d[<span class="number">0</span>]] = [params[d[<span class="number">0</span>]], d[<span class="number">1</span>]])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      params[d[<span class="number">0</span>]] = d[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> params</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test(str)) <span class="comment">// &#123; a: [ '1', '2' ], b: '2', c: '', d: 'xxx', e: undefined &#125;</span></span><br></pre></td></tr></table></figure><h2 id="数组降维"><a href="#数组降维" class="headerlink" title="数组降维"></a>数组降维</h2><a id="more"></a><p>可以使用 <code>Array.prototype.flat()</code> es6+</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newArr = arr.flat() <span class="comment">// [1, 2, 3, 4] 默认降维一层</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 手写</span></span><br><span class="line"><span class="keyword">let</span> newArr2 = <span class="built_in">Array</span>.prototype.concat.apply([], arr) <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h2 id="js-计算"><a href="#js-计算" class="headerlink" title="js 计算"></a>js 计算</h2><p><img src="https://user-gold-cdn.xitu.io/2018/12/19/167c52f755f804ba?w=753&amp;h=540&amp;f=png&amp;s=116531" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxArea</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [start, area] = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> end = arr.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">    <span class="keyword">const</span> h = <span class="built_in">Math</span>.min(arr[start], arr[end])</span><br><span class="line">    <span class="keyword">const</span> result = h * (end - start)</span><br><span class="line">    area = result &gt; area ? result : area</span><br><span class="line">    arr[start] &gt; arr[end] ? end-- : start++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> area</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(maxArea(arr)) <span class="comment">// 49</span></span><br></pre></td></tr></table></figure><p>返回 1 到 400 所有自然数中一共出现过多少次“1”，如 1 到 21 一共出现过 13 次“1”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num = <span class="number">1</span>; num &lt;= number; num++) &#123;</span><br><span class="line">  ;<span class="string">`<span class="subst">$&#123;num&#125;</span>`</span>.replace(<span class="regexp">/1/g</span>, () =&gt; count++)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(count) <span class="comment">// 180</span></span><br></pre></td></tr></table></figure><h2 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h2><p>给定字符串 str，检查其是否包含连续重复的字母（a-zA-Z），包含返回 true，否则返回 false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'adfdsaccsdd'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">containsRepeatingLetter</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/([a-zA-Z])\1/</span>.test(str) <span class="comment">// // \1指代第一个括号的匹配项</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(containsRepeatingLetter(str)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>在正则表达式中，利用()进行分组，使用斜杠加数字表示引用，\1 就是引用第一个分组，\2 就是引用第二个分组。将[a-zA-Z]做为一个分组，然后引用，就可以判断是否有连续重复的字母。</p></blockquote><h3 id="字符串转驼峰"><a href="#字符串转驼峰" class="headerlink" title="字符串转驼峰"></a>字符串转驼峰</h3><p>例如：<code>border-bottom-color</code> —-&gt; <code>borderBottomColor</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'border-bottom-color'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toHump</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newStr = <span class="string">''</span></span><br><span class="line">  params.split(<span class="string">'-'</span>).forEach(<span class="function">(<span class="params">d, i</span>) =&gt;</span> &#123;</span><br><span class="line">    newStr += i === <span class="number">0</span> ? d : <span class="string">`<span class="subst">$&#123;d.charAt(<span class="number">0</span>).toUpperCase()&#125;</span><span class="subst">$&#123;d.substring(<span class="number">1</span>)&#125;</span>`</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> newStr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(toHump(str)) <span class="comment">// borderBottomColor</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;提取-get-请求参数&quot;&gt;&lt;a href=&quot;#提取-get-请求参数&quot; class=&quot;headerlink&quot; title=&quot;提取 get 请求参数&quot;&gt;&lt;/a&gt;提取 get 请求参数&lt;/h2&gt;&lt;p&gt;有这样一个 URL：&lt;a href=&quot;http://item.taobao.com/item.htm?a=1&amp;amp;b=2&amp;amp;c=&amp;amp;d=xxx&amp;amp;e，请写一段JS程序提取URL中的各个GET参数(参数名和参数个数不确定)，将其按key-value形式返回到一个json结构中，如`{a:&amp;#39;1&amp;#39;&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://item.taobao.com/item.htm?a=1&amp;amp;b=2&amp;amp;c=&amp;amp;d=xxx&amp;amp;e，请写一段JS程序提取URL中的各个GET参数(参数名和参数个数不确定)，将其按key-value形式返回到一个json结构中，如`{a:&amp;#39;1&amp;#39;&lt;/a&gt;, b:’2’, c:’’, d:’xxx’, e:undefined}`。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; str = &lt;span class=&quot;string&quot;&gt;&#39;http://item.taobao.com/item.html?a=1&amp;amp;b=2&amp;amp;c=&amp;amp;d=xxx&amp;amp;e&amp;amp;a=2&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;str&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; params = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; paramsStr = str.replace(&lt;span class=&quot;regexp&quot;&gt;/.*\?/&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 提取参数字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// [ &#39;a=1&#39;, &#39;b=2&#39;, &#39;c=&#39;, &#39;d=xxx&#39;, &#39;e&#39; ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  paramsStr.split(&lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;&#39;&lt;/span&gt;).forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;v&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    d = v.split(&lt;span class=&quot;string&quot;&gt;&#39;=&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// [a, 1] [b, 2] [c, &#39;&#39;] [d, xxx] [e]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (d[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; params) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.isArray(params[d[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]]) ? params[d[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]].push(d[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]) : (params[d[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]] = [params[d[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]], d[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      params[d[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]] = d[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; params&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(test(str)) &lt;span class=&quot;comment&quot;&gt;// &amp;#123; a: [ &#39;1&#39;, &#39;2&#39; ], b: &#39;2&#39;, c: &#39;&#39;, d: &#39;xxx&#39;, e: undefined &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;数组降维&quot;&gt;&lt;a href=&quot;#数组降维&quot; class=&quot;headerlink&quot; title=&quot;数组降维&quot;&gt;&lt;/a&gt;数组降维&lt;/h2&gt;
    
    </summary>
    
      <category term="开发随笔" scheme="https://weifo.github.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="面试系列" scheme="https://weifo.github.io/tags/%E9%9D%A2%E8%AF%95%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>页面重绘和回流以及优化</title>
    <link href="https://weifo.github.io/2019/07/10/%E9%9A%8F%E7%AC%94-%E9%87%8D%E6%8E%92%E5%92%8C%E9%87%8D%E7%BB%98/"/>
    <id>https://weifo.github.io/2019/07/10/随笔-重排和重绘/</id>
    <published>2019-07-10T12:51:52.000Z</published>
    <updated>2020-02-16T13:24:20.099Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重绘-redraw-amp-重排-reflow"><a href="#重绘-redraw-amp-重排-reflow" class="headerlink" title="重绘 redraw &amp; 重排 reflow"></a>重绘 redraw &amp; 重排 reflow</h2><p>浏览器运行机制图：<br><img src="http://pbj98r3fm.bkt.clouddn.com/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6.png" alt="enter description here"></p><h3 id="浏览器的运行机制"><a href="#浏览器的运行机制" class="headerlink" title="浏览器的运行机制"></a>浏览器的运行机制</h3><p> 1.<strong>构建DOM树（parse）</strong>： 渲染引擎解析HTML文档，首先将标签转换成DOM树中的DOM node（包括js生成的标签）生成内容树（Content Tree/DOM Tree）；<br> 2.<strong>构建渲染树（construct）</strong>：解析对应的CSS样式文件信息（包括js生成的样式和外部css文件），而这些文件信息以及HTML中可见的指令（如<b></b>），构建渲染树（Rendering Tree/Frame Tree）；<br> 3.<strong>布局渲染树（reflow/layout）</strong>：从根节点递归调用，计算每一个元素的大小、位置等，给出每个节点所应该在屏幕上出现的精确坐标；<br> 4.<strong>绘制渲染树（paint/repaint）</strong>：遍历渲染树，使用UI后端层来绘制每个节点。</p><a id="more"></a><h3 id="重绘（repaint或redraw）"><a href="#重绘（repaint或redraw）" class="headerlink" title="重绘（repaint或redraw）"></a>重绘（repaint或redraw）</h3><p>当盒子的位置、大小以及其他属性，例如颜色、字体大小等都确定下来之后，浏览器便把这些原色都按照各自的特性绘制一遍，将内容呈现在页面上。<br>重绘是指一个元素外观的改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。<br>触发重绘的条件：改变元素外观属性。如：color，background-color等。</p><blockquote><p>注意：table及其内部元素可能需要多次计算才能确定好其在渲染树中节点的属性值，比同等元素要多花两倍时间，这就是我们尽量避免使用table布局页面的原因之一。</p></blockquote><h3 id="重排（重构-回流-reflow）"><a href="#重排（重构-回流-reflow）" class="headerlink" title="重排（重构/回流/reflow）"></a>重排（重构/回流/reflow）</h3><p>当渲染树中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建, 这就称为<strong>回流(reflow)</strong>。每个页面至少需要一次回流，就是在页面第一次加载的时候。<br>重绘和重排的关系：在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程称为重绘。<br><strong>所以，重排必定会引发重绘，但重绘不一定会引发重排。</strong><br>触发重排的条件：任何页面布局和几何属性的改变都会触发重排，比如：</p><ol><li>页面渲染初始化；(无法避免)</li><li>添加或删除可见的DOM元素；</li><li>元素位置的改变，或者使用动画；</li><li>元素尺寸的改变——大小，外边距，边框；</li><li>浏览器窗口尺寸的变化（resize事件发生时）；</li><li>填充内容的改变，比如文本的改变或图片大小改变而引起的计算值宽度和高度的改变；</li><li>读取某些元素属性：（offsetLeft/Top/Height/Width,　clientTop/Left/Width/Height,　scrollTop/Left/Width/Height,　width/height,　getComputedStyle(),　currentStyle(IE)　)</li></ol><blockquote><p>重绘重排的代价：耗时，导致浏览器卡慢。</p></blockquote><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ol><li>浏览器自己的优化：浏览器会维护1个队列，把所有会引起回流、重绘的操作放入这个队列，等队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会flush队列，进行一个批处理。这样就会让多次的回流、重绘变成一次回流重绘。</li><li>我们要注意的优化：我们要减少重绘和重排就是要减少对渲染树的操作，则我们可以合并多次的DOM和样式的修改。并减少对style样式的请求。<ul><li>直接改变元素的className</li><li>display：none；先设置元素为display：none；然后进行页面布局等操作；设置完成后将元素设置为display：block；这样的话就只引发两次重绘和重排；</li><li>不要经常访问浏览器的flush队列属性；如果一定要访问，可以利用缓存。将访问的值存储起来，接下来使用就不会再引发回流；</li><li>使用cloneNode(true or false) 和 replaceChild 技术，引发一次回流和重绘；</li><li>将需要多次重排的元素，position属性设为absolute或fixed，元素脱离了文档流，它的变化不会影响到其他元素；</li><li>如果需要创建多个DOM节点，可以使用DocumentFragment创建完后一次性的加入document；</li><li>尽量不要使用table布局。</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;重绘-redraw-amp-重排-reflow&quot;&gt;&lt;a href=&quot;#重绘-redraw-amp-重排-reflow&quot; class=&quot;headerlink&quot; title=&quot;重绘 redraw &amp;amp; 重排 reflow&quot;&gt;&lt;/a&gt;重绘 redraw &amp;amp; 重排 reflow&lt;/h2&gt;&lt;p&gt;浏览器运行机制图：&lt;br&gt;&lt;img src=&quot;http://pbj98r3fm.bkt.clouddn.com/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6.png&quot; alt=&quot;enter description here&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;浏览器的运行机制&quot;&gt;&lt;a href=&quot;#浏览器的运行机制&quot; class=&quot;headerlink&quot; title=&quot;浏览器的运行机制&quot;&gt;&lt;/a&gt;浏览器的运行机制&lt;/h3&gt;&lt;p&gt; 1.&lt;strong&gt;构建DOM树（parse）&lt;/strong&gt;： 渲染引擎解析HTML文档，首先将标签转换成DOM树中的DOM node（包括js生成的标签）生成内容树（Content Tree/DOM Tree）；&lt;br&gt; 2.&lt;strong&gt;构建渲染树（construct）&lt;/strong&gt;：解析对应的CSS样式文件信息（包括js生成的样式和外部css文件），而这些文件信息以及HTML中可见的指令（如&lt;b&gt;&lt;/b&gt;），构建渲染树（Rendering Tree/Frame Tree）；&lt;br&gt; 3.&lt;strong&gt;布局渲染树（reflow/layout）&lt;/strong&gt;：从根节点递归调用，计算每一个元素的大小、位置等，给出每个节点所应该在屏幕上出现的精确坐标；&lt;br&gt; 4.&lt;strong&gt;绘制渲染树（paint/repaint）&lt;/strong&gt;：遍历渲染树，使用UI后端层来绘制每个节点。&lt;/p&gt;
    
    </summary>
    
      <category term="开发随笔" scheme="https://weifo.github.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="DOM" scheme="https://weifo.github.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>HTTP - TCP 三次握手四次挥手</title>
    <link href="https://weifo.github.io/2018/11/21/http-TCP/"/>
    <id>https://weifo.github.io/2018/11/21/http-TCP/</id>
    <published>2018-11-21T01:47:17.000Z</published>
    <updated>2019-03-18T15:39:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP-的三次握手"><a href="#TCP-的三次握手" class="headerlink" title="TCP 的三次握手"></a>TCP 的三次握手</h2><blockquote><p><code>HTTP</code> 请求与 <code>TCP</code> 链接之间的关系，在客户端向服务端请求和返回的过程中，是需要去创建一个 <code>TCP connection</code>，因为 <code>HTTP</code> 是不存在链接这样一个概念的，它只有请求和响应这样一个概念，请求和响应都是一个数据包，中间要通过一个传输通道，这个传输通道就是在 <code>TCP</code> 里面创建了一个从客户端发起和服务端接收的一个链接，<code>TCP</code> 链接在创建的时候是有一个三次握手(三次网络传输)这样一个消耗在的。</p></blockquote><p>下面是 <code>TCP</code> 报文格式图：</p><p><img src="https://user-gold-cdn.xitu.io/2018/11/21/1673405dad1eced0?w=500&amp;h=380&amp;f=jpeg&amp;s=32339" alt=""><br>↓↓↓↓<br><img src="https://user-gold-cdn.xitu.io/2018/11/21/1673405e30495223?w=1046&amp;h=402&amp;f=png&amp;s=27889" alt=""></p><p>有几个字段需要重点介绍下：</p><ol><li>Seq 序号: <code>sequeence number</code>，用来标识从 TCP 源端向目的端发送的字节流，发起方发送数据时对此进行标记。</li><li>确认序号：<code>acknowledgment number</code>，只有 ACK 标志位为 1 时，确认序号字段才有效，<code>Ack=Seq+1</code>。</li><li>标志位：共 6 个，即 URG、ACK、PSH、RST、SYN、FIN 等，具体含义如下：<ul><li><code>URG</code>：紧急指针（urgent pointer）有效。</li><li><code>ACK</code>：确认序号有效。</li><li><code>PSH</code>：接收方应该尽快将这个报文交给应用层。</li><li><code>RST</code>：重置连接。</li><li><code>SYN</code>：发起一个新连接。</li><li><code>FIN</code>：释放一个连接。</li></ul></li></ol><a id="more"></a><h3 id="第一次握手"><a href="#第一次握手" class="headerlink" title="第一次握手"></a>第一次握手</h3><blockquote><p>客户端发送一个 <code>TCP</code> 的 <code>SYN</code> 标志位置 1 的包指明客户打算连接的服务器的端口，以及初始序号 X,保存在包头的序列号(<code>Sequence Number</code>)字段里。</p></blockquote><ul><li><strong>简单记忆： 建立连接，等待服务器确认</strong></li></ul><p><img src="https://user-gold-cdn.xitu.io/2017/11/9/6b568a608edadc13bc9be7721b00e48a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><ul><li><code>Sequeence Number</code> = X =&gt; 标识字节流字段为 X</li><li><code>SYN</code> = 1 =&gt; 发起一个新连接，序号为 1</li></ul><h3 id="第二次握手"><a href="#第二次握手" class="headerlink" title="第二次握手"></a>第二次握手</h3><blockquote><p>服务器发回确认包(ACK)应答。即 SYN 标志位和 ACK 标志位均为 1 同时，将确认序号(Acknowledgement Number)设置为客户的 I S N 加 1 以.即 X+1。</p></blockquote><ul><li><strong>简单记忆： 服务器收到请求后确认联机</strong></li></ul><p><img src="https://user-gold-cdn.xitu.io/2017/11/9/02f7809aa0b7b0b5db477e180f408535?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><ul><li><code>Sequeence Number</code> = Y =&gt; 标识字节流字段为 Y</li><li><code>acknowledgment number</code> = X + 1 =&gt; 确认序号为 X + 1</li><li><code>SYN</code> = 1 =&gt; 发起一个新连接，序号为 1</li><li><code>ACK</code> = 1 =&gt; 确认序号有效</li></ul><h3 id="第三次握手"><a href="#第三次握手" class="headerlink" title="第三次握手"></a>第三次握手</h3><blockquote><p>客户端再次发送确认包(ACK)SYN 标志位为 0,ACK 标志位为 1.并且把服务器发来 ACK 的序号字段+1,放在确定字段中发送给对方.并且在数据段放写 ISN 的+1</p></blockquote><ul><li><strong>简单记忆：检查 ACK 是否正确, 若正确则建立连接。</strong></li></ul><p><img src="https://user-gold-cdn.xitu.io/2017/11/9/c052d0061d70d359e1ac0b5fc48d844a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><ul><li><code>acknowledgment number</code> = Y + 1 =&gt; 确认序号为 Y + 1</li><li><code>ACK</code> = 1 =&gt; 确认序号有效</li></ul><h2 id="TCP-四次挥手"><a href="#TCP-四次挥手" class="headerlink" title="TCP 四次挥手"></a>TCP 四次挥手</h2><p><code>TCP</code>的连接的拆除需要发送四个包，因此称为四次挥手(<code>four-way handshake</code>)。客户端或服务器均可主动发起挥手动作，在 socket 编程中，任何一方执行 close()操作即可产生挥手操作。</p><p><img src="https://user-gold-cdn.xitu.io/2017/11/9/8c7874fafe233c9278509e40e906055c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><h3 id="为什么建立连接是三次握手，而关闭连接却是四次挥手呢？"><a href="#为什么建立连接是三次握手，而关闭连接却是四次挥手呢？" class="headerlink" title="为什么建立连接是三次握手，而关闭连接却是四次挥手呢？"></a>为什么建立连接是三次握手，而关闭连接却是四次挥手呢？</h3><p>这是因为服务端在 <code>LISTEN</code> 状态下，收到建立连接请求的 <code>SYN</code> 报文后，把 <code>ACK</code> 和 <code>SYN</code> 放在一个报文里发送给客户端。<br>而关闭连接时，当收到对方的 <code>FIN</code> 报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即 <code>close</code>，也可以发送一些数据给对方后，再发送 <code>FIN</code> 报文给对方来表示同意现在关闭连接，因此，己方 <code>ACK</code> 和 <code>FIN</code> 一般都会分开发送。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;TCP-的三次握手&quot;&gt;&lt;a href=&quot;#TCP-的三次握手&quot; class=&quot;headerlink&quot; title=&quot;TCP 的三次握手&quot;&gt;&lt;/a&gt;TCP 的三次握手&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;HTTP&lt;/code&gt; 请求与 &lt;code&gt;TCP&lt;/code&gt; 链接之间的关系，在客户端向服务端请求和返回的过程中，是需要去创建一个 &lt;code&gt;TCP connection&lt;/code&gt;，因为 &lt;code&gt;HTTP&lt;/code&gt; 是不存在链接这样一个概念的，它只有请求和响应这样一个概念，请求和响应都是一个数据包，中间要通过一个传输通道，这个传输通道就是在 &lt;code&gt;TCP&lt;/code&gt; 里面创建了一个从客户端发起和服务端接收的一个链接，&lt;code&gt;TCP&lt;/code&gt; 链接在创建的时候是有一个三次握手(三次网络传输)这样一个消耗在的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面是 &lt;code&gt;TCP&lt;/code&gt; 报文格式图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/11/21/1673405dad1eced0?w=500&amp;amp;h=380&amp;amp;f=jpeg&amp;amp;s=32339&quot; alt=&quot;&quot;&gt;&lt;br&gt;↓↓↓↓&lt;br&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/11/21/1673405e30495223?w=1046&amp;amp;h=402&amp;amp;f=png&amp;amp;s=27889&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;有几个字段需要重点介绍下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Seq 序号: &lt;code&gt;sequeence number&lt;/code&gt;，用来标识从 TCP 源端向目的端发送的字节流，发起方发送数据时对此进行标记。&lt;/li&gt;
&lt;li&gt;确认序号：&lt;code&gt;acknowledgment number&lt;/code&gt;，只有 ACK 标志位为 1 时，确认序号字段才有效，&lt;code&gt;Ack=Seq+1&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;标志位：共 6 个，即 URG、ACK、PSH、RST、SYN、FIN 等，具体含义如下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;URG&lt;/code&gt;：紧急指针（urgent pointer）有效。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ACK&lt;/code&gt;：确认序号有效。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PSH&lt;/code&gt;：接收方应该尽快将这个报文交给应用层。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RST&lt;/code&gt;：重置连接。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SYN&lt;/code&gt;：发起一个新连接。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FIN&lt;/code&gt;：释放一个连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="HTTP" scheme="https://weifo.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://weifo.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>webpack - babel篇</title>
    <link href="https://weifo.github.io/2018/10/01/webpack-babel/"/>
    <id>https://weifo.github.io/2018/10/01/webpack-babel/</id>
    <published>2018-10-01T06:23:24.000Z</published>
    <updated>2020-02-16T13:25:39.050Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://babeljs.io/docs/en/" target="_blank" rel="noopener">Babel</a> 是一个让我们能够使用 ES 新特性的 JS 编译工具，我们可以在 <code>webpack</code> 中配置 <code>Babel</code>，以便使用 ES6、ES7 标准来编写 JS 代码。</p></blockquote><p>本文以当前最新版本的 <a href="https://babeljs.io/docs/en/" target="_blank" rel="noopener">babel - 7.10</a> 为例， 做 <code>babel</code> 的配置. 相关版本号如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@babel/core"</span>: <span class="string">"^7.1.6"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-proposal-decorators"</span>: <span class="string">"^7.1.6"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-transform-runtime"</span>: <span class="string">"^7.1.0"</span>,</span><br><span class="line">    <span class="attr">"@babel/preset-env"</span>: <span class="string">"^7.1.6"</span>,</span><br><span class="line">    <span class="attr">"@babel/runtime"</span>: <span class="string">"^7.1.5"</span>,</span><br><span class="line">    <span class="attr">"babel-loader"</span>: <span class="string">"^8.0.4"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^4.26.1"</span>,</span><br><span class="line">    <span class="attr">"webpack-cli"</span>: <span class="string">"^3.1.2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="babel-loader-和-babel-core"><a href="#babel-loader-和-babel-core" class="headerlink" title="babel-loader 和 @babel/core"></a>babel-loader 和 @babel/core</h2><p>建立基本的 <code>webpack</code> 配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mkdir webpack-<span class="function"><span class="params">babel</span> =&gt;</span> cd  webpack-<span class="function"><span class="params">babel</span> =&gt;</span> yarn init -y  <span class="comment">// 初始化</span></span><br><span class="line">npm i yarn -g <span class="comment">// 安装了yarn可以忽略</span></span><br><span class="line">yarn add webpack webpack-cli -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// package.json 中添加：</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"webpack --mode development"</span>,</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"webpack --mode production"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">yarn add babel-loader @babel/core -D</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.npmjs.com/package/yarn" target="_blank" rel="noopener">yarn</a> : 和 <code>npm</code> 几乎一样，本文使用 <code>yarn</code> 安装…</li><li><a href="https://www.npmjs.com/package/babel-loader" target="_blank" rel="noopener">babel-loader</a>: 转义 js 文件代码的 loader</li><li><a href="https://www.npmjs.com/package/@babel/core" target="_blank" rel="noopener">@babel/core</a>：babel 核心库</li></ul><p>根目录下添加 <code>webpack.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'[name].[hash:8].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.m?js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        use: &#123; <span class="attr">loader</span>: <span class="string">'babel-loader'</span> &#125; <span class="comment">// options 在 .babelrc 定义</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>src/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> func = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello webpack'</span>)</span><br><span class="line">&#125;</span><br><span class="line">func()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'new User'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> User()</span><br></pre></td></tr></table></figure><p>执行 <code>yarn build</code> 后就可以打包成功，打包后的代码是压缩后的。而 <code>yarn start</code> 后的代码是未压缩的。为了使代码可读性高一点，我们可以在<code>webpack.config.js</code>添加：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  devtool: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="babel-preset-env"><a href="#babel-preset-env" class="headerlink" title="@babel-preset-env"></a>@babel-preset-env</h2><p>打包后我们可以发现箭头函数并未转化为 <code>ES5</code> 语法！</p><p>查阅 <a href="https://babeljs.io/docs/en/plugins" target="_blank" rel="noopener">babel plugins</a> 文档，如果要转义箭头函数，需要使用到 <code>@babel/plugin-transform-arrow-functions</code> 这个插件<br>同理转义 <code>class</code> 需要使用 <code>@babel/plugin-transform-classes</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @babel/plugin-transform-arrow-functions @babel/plugin-transform-classes -D</span><br></pre></td></tr></table></figure><p>根目录下建立 <code>.babelrc</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    <span class="string">"@babel/plugin-transform-arrow-functions"</span>,</span><br><span class="line">    <span class="string">"@babel/plugin-transform-classes"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>yarn build</code> 之后可以看出 箭头函数和类都被转义了。</p><p>但是假如你再使用 <code>async await</code> 之类的 <code>es6</code> 语法，你还得一个个添加，这是不实际的。</p><p><a href="https://babeljs.io/docs/en/babel-preset-env#docsNav" target="_blank" rel="noopener">@babel-preset-env</a> 就整合了这些语法转义插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Using plugins:</span><br><span class="line">transform-template-literals &#123;&#125;</span><br><span class="line">transform-literals &#123;&#125;</span><br><span class="line">transform-<span class="function"><span class="keyword">function</span>-<span class="title">name</span> </span>&#123;&#125;</span><br><span class="line">transform-arrow-functions &#123;&#125;</span><br><span class="line">transform-block-scoped-functions &#123;&#125;</span><br><span class="line">transform-classes &#123;&#125;</span><br><span class="line">transform-object-<span class="keyword">super</span> &#123;&#125;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>使用如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @babel-preset-env -D</span><br></pre></td></tr></table></figure><p><code>.babelrc</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"@babel/preset-env"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="babel-polyfill"><a href="#babel-polyfill" class="headerlink" title="@babel/polyfill"></a>@babel/polyfill</h2><blockquote><p>Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API ，比如 Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转码。</p></blockquote><p>这样就导致了一些新的 API 老版浏览器不兼容。如上述所说，对于新的 API，你可能需要引入 <code>@babel-polyfill</code> 来进行兼容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @babel-polyfill -D</span><br></pre></td></tr></table></figure><p>修改 <code>weboack.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: [<span class="string">'@babel-polyfill'</span>, <span class="string">'./src/index.js'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>yarn build</code> 发现文件体积大了很多，因为上面的代码表示将 <code>@babel-polyfill</code> 的代码也打包进去了。</p><p>当然这不是我们希望的，如何按需编译呢？ 我们可以这么做：</p><p><code>index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'@babel/polyfill'</span> <span class="comment">// 引入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> func = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello webpack'</span>)</span><br><span class="line">&#125;</span><br><span class="line">func()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'new User'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> User()</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'promise'</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="string">'foo'</span>)</span><br></pre></td></tr></table></figure><p>还原 <code>webpack.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 <code>.babelrc</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [[<span class="string">"@babel/preset-env"</span>, &#123; <span class="attr">"useBuiltIns"</span>: <span class="string">"usage"</span> &#125;]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>yarn build</code> 后发现我们的代码体积就变得很小了！</p><h2 id="babel-runtime-和-babel-plugin-transform-runtime"><a href="#babel-runtime-和-babel-plugin-transform-runtime" class="headerlink" title="@babel/runtime 和 @babel/plugin-transform-runtime"></a>@babel/runtime 和 @babel/plugin-transform-runtime</h2><ul><li><code>babel-polyfill</code> 会污染全局作用域, 如引入 <code>Array.prototype.includes</code> 修改了 Array 的原型，除此外还有 String…</li><li><code>babel-polyfill</code> 引入新的对象： <code>Promise</code>、<code>WeakMap</code> 等</li></ul><p>这也不是我们希望出现的。</p><ul><li><code>@babel/runtime</code> 的作用：<ul><li>提取辅助函数。ES6 转码时，babel 会需要一些辅助函数，例如 _extend。babel 默认会将这些辅助函数内联到每一个 js 文件里， babel 提供了 transform-runtime 来将这些辅助函数“搬”到一个单独的模块 <code>babel-runtime</code> 中，这样做能减小项目文件的大小。</li><li>提供 <code>polyfill</code>：不会污染全局作用域，但是不支持实例方法如 Array.includes</li></ul></li><li><code>@transform-runtime</code> 的作用：<ul><li><code>babel-runtime</code> 更像是分散的 <code>polyfill</code> 模块，需要在各自的模块里单独引入，借助 transform-runtime 插件来自动化处理这一切，也就是说你不要在文件开头 import 相关的 <code>polyfill</code>，你只需使用，<code>transform-runtime</code> 会帮你引入。</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add  @babel/runtime-corejs2</span><br><span class="line">yarn add @babel/plugin-transform-runtime -D</span><br></pre></td></tr></table></figure><p>修改 <code>.babelrc</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"@babel/preset-env"</span>],</span><br><span class="line">  <span class="attr">"plugins"</span>: [[<span class="string">"@babel/plugin-transform-runtime"</span>, &#123; <span class="attr">"corejs"</span>: <span class="number">2</span> &#125;]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>index.js</code> 移除 <code>import &#39;@babel/polyfill&#39;</code></p><h2 id="babel-plugin-proposal-decorators"><a href="#babel-plugin-proposal-decorators" class="headerlink" title="@babel/plugin-proposal-decorators"></a>@babel/plugin-proposal-decorators</h2><p>添加装饰器模式的支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @babel/plugin-proposal-decorators -D</span><br></pre></td></tr></table></figure><p><code>index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">annotation</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  target.annotated = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@annotation</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'new User'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p><code>.babelrc</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"@babel/preset-env"</span>],</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    [<span class="string">"@babel/plugin-proposal-decorators"</span>, &#123; <span class="attr">"decoratorsBeforeExport"</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">    [<span class="string">"@babel/plugin-transform-runtime"</span>, &#123; <span class="attr">"corejs"</span>: <span class="number">2</span> &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://babeljs.io/docs/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Babel&lt;/a&gt; 是一个让我们能够使用 ES 新特性的 JS 编译工具，我们可以在 &lt;code&gt;webpack&lt;/code&gt; 中配置 &lt;code&gt;Babel&lt;/code&gt;，以便使用 ES6、ES7 标准来编写 JS 代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文以当前最新版本的 &lt;a href=&quot;https://babeljs.io/docs/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;babel - 7.10&lt;/a&gt; 为例， 做 &lt;code&gt;babel&lt;/code&gt; 的配置. 相关版本号如下&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;@babel/core&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^7.1.6&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;@babel/plugin-proposal-decorators&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^7.1.6&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;@babel/plugin-transform-runtime&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^7.1.0&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;@babel/preset-env&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^7.1.6&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;@babel/runtime&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^7.1.5&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;babel-loader&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^8.0.4&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;webpack&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^4.26.1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;webpack-cli&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^3.1.2&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="webpack" scheme="https://weifo.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://weifo.github.io/tags/webpack/"/>
    
  </entry>
  
</feed>
